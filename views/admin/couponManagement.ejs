<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Coupon Management</title>
    <link
        href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Montserrat:wght@300;400;600;700&display=swap"
        rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        :root {
            --blue-900: #0d47a1;
            --blue-800: #1565c0;
            --blue-700: #1976d2;
            --blue-600: #1e88e5;
            --blue-500: #2196f3;
            --blue-50: #e3f2fd;
            --white: #ffffff;
            --bg: #f8fafc;
            --text: #111827;
            --muted: #6b7280;
            --border: #e5e7eb;
            --shadow: 0 12px 30px rgba(0, 0, 0, 0.07);
            --radius: 14px;
        }

        * {
            box-sizing: border-box
        }


        .error {
            color: red;
            font-size: 12px;
            display: block;
            margin-top: 3px;
        }


        body {
            height: 100%
        }

        body {
            margin: 0;
            font-family: 'Montserrat', system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, 'Helvetica Neue', Arial, sans-serif;
            color: var(--text);
            background: var(--bg);
            line-height: 1.45;
        }

        .pagination {
            display: flex;
            align-items: center;
            justify-content: center;
            background: #e6f0ff;
            /* light blue background */
            padding: 10px 20px;
            border-radius: 8px;
            gap: 10px;
            font-family: Arial, sans-serif;
        }

        .pagination button {
            background: #007bff;
            /* blue buttons */
            color: #fff;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .pagination button:hover {
            background: #0056b3;
            /* darker blue on hover */
        }

        .pagination .page-box {
            background: #cce0ff;
            /* soft blue for page number */
            color: #003366;
            /* dark blue text */
            padding: 8px 16px;
            border-radius: 6px;
            font-weight: bold;
            font-size: 16px;
        }

        .pagination span {
            color: #003366;
            /* dark blue */
            font-size: 16px;
            font-weight: 600;
        }



        a {
            color: inherit;
            text-decoration: none
        }

        img {
            max-width: 100%
        }

        .hero-inner {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 20px;
        }

        .hero-title {
            margin: 0 0 6px 0;
            font-weight: 800;
            letter-spacing: .5px;
            font-size: 32px;
        }

        .hero-sub {
            margin: 0;
            color: #e6f4ff;
            opacity: .95;
        }

        /* Main section */
        .main {
            max-width: 1089px;
            margin: 20px auto;
            padding: 48px 0px;
            margin-left: 15rem;
        }

        .card {
            background: var(--white);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }

        /* Action bar */
        .action-bar {
            padding: 18px;
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid var(--border);
        }

        .search-wrap {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            align-items: center
        }

        .search-form {
            display: flex;
            gap: 8px;
            align-items: center;
            flex-wrap: wrap;
        }

        .input {
            height: 44px;
            min-width: 260px;
            padding: 10px 14px;
            border-radius: 12px;
            border: 1px solid var(--border);
            background: #ffffff;
            outline: none;
            color: #111827;
            transition: border .2s, box-shadow .2s;
        }

        .input:focus {
            border-color: #bbdefb;
            box-shadow: 0 0 0 4px rgba(33, 150, 243, 0.15);
        }

        .btn {
            height: 44px;
            padding: 0 16px;
            border-radius: 12px;
            border: 1px solid transparent;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: transform .08s ease, background .2s, border .2s;
            user-select: none;
        }

        .btn:active {
            transform: translateY(1px)
        }

        .btn-primary {
            background: var(--blue-700);
            color: #fff;
            border-color: var(--blue-700)
        }

        .btn-primary:hover {
            background: var(--blue-800)
        }

        .btn-ghost {
            background: #ffffff;
            border-color: var(--border);
            color: #1f2937
        }

        .btn-ghost:hover {
            border-color: #cbd5e1;
            background: #f8faf9
        }

        .btn-outline {
            background: var(--blue-50);
            color: var(--blue-800);
            border-color: #bbdefb;
        }

        .btn-outline:hover {
            background: #d9ecff;
            border-color: #90caf9;
        }

        .spacer {
            flex: 1
        }

        /* Table */
        .table-wrap {
            padding: 16px
        }

        .table-scroll {
            overflow: auto;
            border-radius: 12px;
            border: 1px solid var(--border)
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            background: #fff
        }

        thead th {
            position: sticky;
            top: 0;
            z-index: 1;
            background: #e8f4ff;
            border-bottom: 1px solid #c5e1ff;
            color: #0d3c6c;
            text-align: left;
            font-weight: 700;
            font-size: 13px;
            letter-spacing: .3px;
            padding: 14px 14px;
        }

        tbody td {
            padding: 14px 14px;
            border-bottom: 1px solid var(--border);
            vertical-align: middle;
            font-size: 14px;
        }

        tbody tr:last-child td {
            border-bottom: none
        }

        tbody tr:hover td {
            background: #fafdff
        }

        .code {
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
            background: #f0f7ff;
            border: 1px dashed #c5e1ff;
            border-radius: 8px;
            padding: 4px 8px;
            color: #0d47a1;
        }

        /* Badges */
        .badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 10px;
            font-size: 12px;
            font-weight: 700;
            border-radius: 999px;
            border: 1px solid transparent;
            white-space: nowrap;
        }

        .badge.success {
            background: var(--blue-50);
            color: var(--blue-800);
            border-color: #bbdefb
        }

        .badge.inactive {
            background: #f1f5f9;
            color: #475569;
            border-color: #e2e8f0
        }

        .badge.expired {
            background: #eef2f7;
            color: #334155;
            border-color: #e2e8f0
        }

        .badge.public {
            background: #e8f4ff;
            color: #0d47a1;
            border-color: #bbdefb
        }

        .badge.private {
            background: #f8fafc;
            color: #475569;
            border-color: #e2e8f0
        }

        .amount,
        .min {
            font-weight: 700;
            color: #0d3c6c
        }

        .muted {
            color: var(--muted)
        }

        .usage {
            font-weight: 700;
            color: #075985
        }

        .actions {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .btn-small {
            height: 36px;
            padding: 0 12px;
            border-radius: 10px;
            font-size: 13px;
            width: 4rem;
        }

        .btn-soft {
            background: #ffffff;
            border-color: #bbdefb;
            color: #0d47a1;
        }

        .btn-soft:hover {
            background: #e8f4ff;
            border-color: #90caf9
        }

        .btn-neutral {
            background: #ffffff;
            border-color: #e5e7eb;
            color: #334155;
        }

        .btn-neutral:hover {
            background: #f8fafc;
            border-color: #dbe1e8
        }

        /* Pagination */
        .pagination {
            padding: 14px 18px;
            border-top: 1px solid var(--border);
            display: flex;
            justify-content: center
        }

        .page-list {
            display: flex;
            gap: 8px;
            list-style: none;
            margin: 0;
            padding: 0
        }

        .page-link {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 40px;
            height: 40px;
            padding: 0 12px;
            border-radius: 10px;
            border: 1px solid #bbdefb;
            background: var(--white);
            color: #0d47a1;
            font-weight: 700;
            transition: background .2s, border .2s, transform .08s ease;
        }

        .page-link:hover {
            background: #e8f4ff;
            border-color: #90caf9
        }

        .page-link.active {
            background: var(--blue-700);
            border-color: var(--blue-700);
            color: #fff;
        }

        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background-color: white;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            padding: 16px 20px;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-weight: 700;
            font-size: 18px;
            margin: 0;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--muted);
        }

        .modal-body {
            padding: 20px;
        }

        .modal-footer {
            padding: 16px 20px;
            border-top: 1px solid var(--border);
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-label {
            display: block;
            margin-bottom: 6px;
            font-weight: 600;
            font-size: 14px;
        }

        .form-input {
            width: 100%;
            padding: 10px 14px;
            border-radius: 8px;
            border: 1px solid var(--border);
            font-family: inherit;
            font-size: 14px;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--blue-500);
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.15);
        }

        .form-row {
            display: flex;
            gap: 16px;
        }

        .form-row .form-group {
            flex: 1;
        }

        /* Responsive helpers */
        @media (max-width: 720px) {
            .input {
                min-width: unset;
                width: 100%
            }

            .search-form {
                width: 100%
            }

            .action-bar {
                align-items: stretch
            }

            .spacer {
                display: none
            }

            thead th:nth-child(3),
            thead th:nth-child(4),
            thead th:nth-child(6),
            thead th:nth-child(9) {
                display: none;
            }

            tbody td:nth-child(3),
            tbody td:nth-child(4),
            tbody td:nth-child(6),
            tbody td:nth-child(9) {
                display: none;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }
        }
    </style>
</head>

<body>
    <%- include('../../views/partials/admin/adminHeaders', {title: 'adminHeader-page' }) %>

        <%- include('../../views/partials/admin/adminSidebar', {title: 'adminSidebar-page' }) %>

            <!-- Main Content -->
            <main class="main">
                <section class="card" aria-labelledby="couponListHeading">
                    <div class="action-bar">
                        <h2 id="couponListHeading" class="sr-only">Coupon List</h2>
                        <div class="search-wrap">
                            <form class="search-form" action="#" role="search" aria-label="Search coupons">
                                <input id="searchInput" class="input" type="text" name="query"
                                    placeholder="Search coupons..." aria-label="Search coupons" />
                                <button id="searchResetBtn" class="btn btn-ghost" type="reset">Reset</button>
                                <button id="searchBtn" class="btn btn-outline" type="submit">Search</button>
                            </form>
                        </div>
                        <div class="spacer" aria-hidden="true"></div>
                        <div>
                            <button class="btn btn-primary" id="addCouponBtn">+ Add New Coupon</button>
                        </div>
                    </div>

                    <div class="table-wrap">
                        <div class="table-scroll">
                            <table aria-describedby="couponListHeading">
                                <caption class="sr-only">List of coupons</caption>
                                <thead>
                                    <tr>
                                        <th scope="col">Coupon Name</th>
                                        <th scope="col">Code</th>
                                        <th scope="col">Created Date</th>
                                        <th scope="col">Expire Date</th>
                                        <th scope="col">Expire Time</th>
                                        <th scope="col">Offer Price</th>
                                        <th scope="col">Min Amount</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Visibility</th>
                                        <th scope="col">Used Count</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="tableBody">
                                    <tr>
                                        <% coupons.forEach((cpn,index)=> { %>
                                            <td>
                                                <%= cpn.name %>

                                            </td>
                                            <td><span class="code">
                                                    <%= cpn.code %>


                                                </span></td>


                                            <td>
                                                <%= new Date(cpn.createdOn).toLocaleDateString("en-GB", { day: "2-digit"
                                                    , month: "short" , year: "numeric" }) %>
                                            </td>


                                            <td>
                                                <%= new Date(cpn.expireOn).toLocaleDateString("en-GB", { day: "2-digit"
                                                    , month: "short" , year: "numeric" }) %>
                                            </td>

                                            <!-- ✅ Expire Time (NEW COLUMN) -->
                                            <td>
                                                <%= new Date(cpn.expireOn).toLocaleTimeString("en-GB", { hour: "2-digit"
                                                    , minute: "2-digit" }) %>
                                            </td>

                                            <td class="amount">₹<%= cpn.amount %>
                                            </td>
                                            <td class="min">₹<%= cpn.minimumPrice %>
                                            </td>

                                            <% if (new Date(cpn.expireOn) < currentDate) { %>
                                                <td><span class="badge expired" style="color: red;">Expired</span></td>
                                                <% } else { %>
                                                    <td><span class="badge expired" style="color: green;">Valid</span>
                                                    </td>
                                                    <% } %>

                                                        <% if(cpn.isList){ %>
                                                            <td><span id='visibleStatus<%=cpn.code%>'
                                                                    class="badge private">Public</span></td>
                                                            <% } else { %>
                                                                <td><span id="visibleStatus<%=cpn.code%>' class=" badge
                                                                        private">Private</span></td>
                                                                <% } %>

                                                                    <td><span class="usage">
                                                                            <%= cpn.maxUsage %>
                                                                        </span></td>

                                                                    <td class="actions">
                                                                        <button class="btn btn-soft btn-small edit-btn"
                                                                            data-id=<%=cpn._id %>>Edit</button>
                                                                        <% if(cpn.isList){ %>
                                                                            <button
                                                                                class="btn btn-neutral btn-small list-btn"
                                                                                data-id=<%=cpn.code %>
                                                                                data-status="private">unList</button>
                                                                            <% } else { %>
                                                                                <button
                                                                                    class="btn btn-neutral btn-small list-btn"
                                                                                    data-id=<%=cpn.code %>
                                                                                    data-status="Public">List</button>
                                                                                <% } %>
                                                                                    <button
                                                                                        class="btn btn-neutral btn-small delete-btn"
                                                                                        data-id=<%=cpn.code%>>Delete</button>
                                                                    </td>
                                    </tr>
                                    <% }); %>
                                </tbody>

                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="pagination">
                            <% if(currentPage>1){ %>
                                <button onclick="pagination('<%= currentPage %>','previous')">&#9664;</button>
                                <% } %>
                                    <div id="currentPage" class="page-box">
                                        <%= currentPage %>
                                    </div>
                                    <span>of <%= totalPage %></span>
                                    <% if(currentPage < totalPage){ %>
                                        <button onclick="pagination('<%= currentPage %>','next')">&#9654;</button>
                                        <% } %>
                        </div>
                    </div>
                </section>
            </main>

            <!-- Add Coupon Modal -->
            <div class="modal" id="couponModal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title" id="modalTitle">Add New Coupon</h3>
                        <button class="modal-close" id="closeModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form id="couponForm">
                            <input type="hidden" id="couponId" value="">
                            <div class="form-group">
                                <label for="name" class="form-label">Coupon Name</label>
                                <input type="text" id="name" class="form-input">
                                <small id="nameError" class="error"></small>

                            </div>
                            <div class="form-group">
                                <label for="code" class="form-label">Coupon Code</label>
                                <input type="text" id="code" class="form-input">
                                <small id="codeError" class="error"></small>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="amount" class="form-label">Discount Amount (₹)</label>
                                    <input type="number" id="amount" class="form-input">
                                    <small id="amountError" class="error"></small>
                                </div>
                                <div class="form-group">
                                    <label for="minimumPrice" class="form-label">Minimum Cart Value (₹)</label>
                                    <input type="number" id="minimumPrice" class="form-input">
                                    <small id="minimumPriceError" class="error"></small>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="maxUsage" class="form-label">Maximum Usage</label>
                                    <input type="number" id="maxUsage" class="form-input">
                                    <small id="maxUsageError" class="error"></small>
                                </div>
                                <div class="form-group">
                                    <label for="isList" class="form-label">Visibility</label>
                                    <select id="isList" class="form-input">
                                        <option value="true">Public</option>
                                        <option value="false">Private</option>
                                    </select>
                                    <small id="isListError" class="error"></small>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="expireOn" class="form-label">Expiry Date</label>
                                <input type="datetime-local" id="expireOn" class="form-input">
                                <small id="expireOnError" class="error"></small>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-ghost" id="cancelBtn">Cancel</button>
                        <button class="btn btn-primary" id="saveCouponBtn">Save Coupon</button>
                    </div>
                </div>
            </div>
            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
            <script>


                // DOM Elements
                let cpnId
                const addCouponBtn = document.getElementById('addCouponBtn');
                const couponModal = document.getElementById('couponModal');
                const closeModal = document.getElementById('closeModal');
                const cancelBtn = document.getElementById('cancelBtn');
                const saveCouponBtn = document.getElementById('saveCouponBtn');
                const couponForm = document.getElementById('couponForm');
                const modalTitle = document.getElementById('modalTitle');


                // Event Listeners for Modal
                addCouponBtn.addEventListener('click', () => {
                    couponForm.reset();
                    couponId.value = '';
                    modalTitle.textContent = 'Add New Coupon';
                    couponModal.classList.add('show');
                });

                closeModal.addEventListener('click', () => {
                    couponModal.classList.remove('show');
                });

                cancelBtn.addEventListener('click', () => {
                    couponModal.classList.remove('show');
                });

                // Close modal when clicking outside
                window.addEventListener('click', (e) => {
                    if (e.target === couponModal) {
                        couponModal.classList.remove('show');
                    }
                });

                // Save Coupon
                saveCouponBtn.addEventListener('click', async () => {
                    try {

                        if (!couponForm.checkValidity()) {
                            couponForm.reportValidity();
                            return;
                        }

                        if (modalTitle.textContent === 'Add New Coupon') {
                            const formData = {
                                name: document.getElementById('name').value,
                                code: document.getElementById('code').value,
                                amount: parseFloat(document.getElementById('amount').value),
                                minimumPrice: parseFloat(document.getElementById('minimumPrice').value),
                                maxUsage: parseInt(document.getElementById('maxUsage').value),
                                isList: document.getElementById('isList').value === 'true',
                                expireOn: new Date(document.getElementById('expireOn').value)
                            }

                            const errors = validateCouponForm();
                            const isValid = displayErrors(errors);

                            if (!isValid) return;



                            const response = await fetch(`/admin/addCoupon?page=${encodeURIComponent(1)}`, {
                                method: 'post',
                                headers: {
                                    'Content-type': 'application/json'
                                },
                                body: JSON.stringify({
                                    formData
                                })
                            })

                            if (response.ok) {
                                const result = await response.json()
                                const coupon = result.coupon;

                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: couponId.value ? 'Coupon updated successfully!' : 'Coupon created successfully!',
                                    showConfirmButton: false,
                                    timer: 1500,
                                    timerProgressBar: true
                                });

                                // If it's a new coupon (not editing), add a new row
                                if (!couponId.value) {
                                    const tbody = document.querySelector("table tbody");


                                    // Format dates
                                    const createdDate = new Date(coupon.createdOn || Date.now()).toLocaleDateString("en-GB", {
                                        day: "2-digit", month: "short", year: "numeric"
                                    });
                                    const expireDate = new Date(coupon.expireOn).toLocaleDateString("en-GB", {
                                        day: "2-digit", month: "short", year: "numeric"
                                    });




                                    tbody.insertAdjacentHTML('afterbegin', `
  <tr>
    <td>${coupon.name}</td>
    <td><span class="code">${coupon.code}</span></td>
    <td>${createdDate}</td>
    <td>${expireDate}</td>
     <td>
  <span>
    ${new Date(coupon.expireOn).toLocaleTimeString("en-GB", {
                                        hour: "2-digit",
                                        minute: "2-digit"
                                    })}
  </span>
</td>
    <td class="amount">₹${coupon.amount}</td>
    <td class="min">₹${coupon.minimumPrice}</td>
    <td>
      <span class="badge expired" style="color:${new Date(coupon.expireOn) < new Date() ? 'red' : 'green'};">
        ${new Date(coupon.expireOn) < new Date() ? 'Expired' : 'Valid'}
      </span>
    </td>

    <td>
      <span id="visibleStatus${coupon.code}" class="badge private">
        ${coupon.isList ? 'Public' : 'Private'}
      </span>
    </td>
    <td><span class="usage">${coupon.maxUsage}</span></td>
    <td class="actions">
      <button class="btn btn-soft btn-small edit-btn" data-id="${coupon.code}">Edit</button>
      <button class="btn btn-neutral btn-small list-btn" data-id="${coupon.code}" data-status="${coupon.isList ? 'private' : 'Public'}">
        ${coupon.isList ? 'unList' : 'List'}
      </button>
      <button class="btn btn-neutral btn-small delete-btn" data-id="${coupon.code}">Delete</button>
    </td>
  </tr>
`);


                                    if (couponId.value) {
                                        formData.id = couponId.value;
                                    }
                                    // Close modal
                                    couponModal.classList.remove('show');

                                }
                            } else {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: couponId.value || 'Action failed!',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                });
                            }
                        } else if (modalTitle.textContent === 'Edit Coupon') {

                            const couponData = {
                                // Access each input field by its ID
                                name: document.getElementById('name').value,
                                code: document.getElementById('code').value,
                                amount: document.getElementById('amount').value,
                                minimumPrice: document.getElementById('minimumPrice').value,
                                maxUsage: document.getElementById('maxUsage').value,
                                isList: document.getElementById('isList').value,
                                expireOn: document.getElementById('expireOn').value,
                                // couponId: document.getElementById('couponId').value
                            }


                            const errors = validateCouponForm();
                            const isValid = displayErrors(errors);

                            if (!isValid) return;

                            const response = await fetch(`/admin/editCoupon?id=${encodeURIComponent(cpnId)}`, {
                                method: 'PATCH',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    couponData
                                })
                            })

                            const result = await response.json()
                            couponModal.classList.remove('show');

                            if (response.ok) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: 'Coupon updated successfully',
                                    showConfirmButton: false,
                                    timer: 1500,
                                    timerProgressBar: true
                                });
                            } else {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: result.message || 'Update failed',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                });
                            }

                        }


                    } catch (error) {

                        Swal.fire({
                            title: 'Failed!',
                            text: error || 'something went wrong please try again later!',
                            icon: 'error',
                            confirmButtonColor: '#1976d2'
                        });
                    }
                });


                function displayErrors(errors) {
                    // Clear all previous
                    document.querySelectorAll(".error").forEach(el => el.textContent = "");

                    let hasError = false;

                    if (errors.name) {
                        document.getElementById("nameError").textContent = errors.name;
                        hasError = true;
                    }
                    if (errors.code) {
                        document.getElementById("codeError").textContent = errors.code;
                        hasError = true;
                    }
                    if (errors.amount) {
                        document.getElementById("amountError").textContent = errors.amount;
                        hasError = true;
                    }
                    if (errors.minimumPrice) {
                        document.getElementById("minimumPriceError").textContent = errors.minimumPrice;
                        hasError = true;
                    }
                    if (errors.maxUsage) {
                        document.getElementById("maxUsageError").textContent = errors.maxUsage;
                        hasError = true;
                    }
                    if (errors.isList) {
                        document.getElementById("isListError").textContent = errors.isList;
                        hasError = true;
                    }
                    if (errors.expireOn) {
                        document.getElementById("expireOnError").textContent = errors.expireOn;
                        hasError = true;
                    }

                    return !hasError; // true if valid, false if errors
                }

                function validateCouponForm() {
                    const errors = {
                        name: "",
                        code: "",
                        amount: "",
                        minimumPrice: "",
                        maxUsage: "",
                        isList: "",
                        expireOn: ""
                    };

                    const name = document.getElementById('name').value.trim();
                    const code = document.getElementById('code').value.trim().toUpperCase();
                    const amount = document.getElementById('amount').value.trim();
                    const minimumPrice = document.getElementById('minimumPrice').value.trim();
                    const maxUsage = document.getElementById('maxUsage').value.trim();
                    const isList = document.getElementById('isList').value;
                    const expireOn = document.getElementById('expireOn').value.trim();


                    if (!name) {
                        errors.name = "Name is required.";
                    } else if (name.length < 3 || name.length > 10) {
                        errors.name = "Name must be 3–10 characters.";
                    } else if (!/[a-zA-Z]/.test(name)) {
                        errors.name = "Name must contain at least one alphabet.";
                    }


                    const codeRe = /^[A-Z0-9_-]{3,10}$/;
                    if (!code) errors.code = "Code is required.";
                    else if (!codeRe.test(code)) errors.code = "Code must be 3–10 chars (A-Z, 0-9, _, -).";


                    if (amount === "") errors.amount = "Amount is required.";
                    else if (isNaN(amount) || Number(amount) < 0) errors.amount = "Amount must be a number ≥ 0.";
                    else if (Number(amount) >= Number(minimumPrice)) {
                        errors.amount = "Discount Price cannot be equal or more than Minimum Cart value";
                    }


                    // minimumPrice → number ≥ 0
                    if (minimumPrice === "") errors.minimumPrice = "Minimum Price is required.";
                    else if (isNaN(minimumPrice) || Number(minimumPrice) < 0) errors.minimumPrice = "Minimum Price must be ≥ 0.";

                    // maxUsage → integer ≥ 1
                    if (maxUsage === "") errors.maxUsage = "Max Usage is required.";
                    else if (!Number.isInteger(Number(maxUsage)) || Number(maxUsage) < 1)
                        errors.maxUsage = "Max Usage must be an integer ≥ 1.";

                    // isList → must be true/false
                    if (isList !== "true" && isList !== "false") {
                        errors.isList = "Please select Public or Private.";
                    }

                    // expireOn → valid future date
                    if (!expireOn) {
                        errors.expireOn = "Expire date is required.";
                    } else {
                        const expDate = new Date(expireOn);
                        if (isNaN(expDate.getTime())) {
                            errors.expireOn = "Expire date must be valid.";
                        } else if (expDate <= new Date()) {
                            errors.expireOn = "Expire date must be in the future.";
                        }
                    }

                    return errors;
                }


                document.querySelectorAll('.edit-btn').forEach(btn => {
                    btn.addEventListener('click', async function (e) {
                        try {
                            const row = this.closest("tr"); // find the parent row of clicked button

                            const id = e.target.dataset.id;


                            cpnId = id

                            couponId.value = couponData.id;


                            modalTitle.textContent = 'Edit Coupon';

                            couponModal.classList.add('show');



                        } catch (error) {
                            console.error('error while editing coupon', error)
                        }
                    });
                });

                // Delete Coupon
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', async function () {
                        const code = this.getAttribute('data-id');
                        const row = this.closest('tr');
                        const couponName = row.querySelector('td:first-child').textContent;

                        const { isConfirmed } = await Swal.fire({
                            title: 'Are you sure?',
                            text: `You are about to delete the coupon "${couponName}". This action cannot be undone.`,
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#6b7280',
                            confirmButtonText: 'Yes, delete it!'
                        });

                        if (isConfirmed) {
                            const response = await fetch(`/admin/deleteCoupon?code=${encodeURIComponent(code)}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });

                            if (response.ok) {
                                // ✅ remove row from DOM
                                row.remove();

                                // ✅ success toast
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: 'Coupon deleted successfully',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                });
                            } else {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Something went wrong!',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                });
                            }
                        }
                    });
                });

                // List/Unlist Coupon
                document.querySelectorAll('.list-btn, .unlist-btn').forEach(btn => {

                    btn.addEventListener('click', async function () {
                        try {

                            const code = this.getAttribute('data-id');
                            const visibleStatus = document.getElementById(`visibleStatus${code}`)

                            const currentStatus = this.getAttribute('data-status')
                            const action = currentStatus === 'private' ? 'unList' : 'List';
                            const { isConfirmed } = await Swal.fire({
                                title: `Are you sure?`,
                                text: `Do you want to ${action} this coupon?`,
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonText: `Yes, ${action}`,
                                cancelButtonText: "Cancel",
                                reverseButtons: true
                            });


                            const response = await fetch(`/admin/listUnlistCoupon?code=${encodeURIComponent(code)}`)
                            if (response.ok) {
                                this.setAttribute("data-status", currentStatus === "private" ? "Public" : "private");
                                btn.textContent = currentStatus === 'private' ? 'List' : 'unList';

                                visibleStatus.textContent = currentStatus === 'private' ? 'private' : 'Public'
                            } else {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Something went wrong!',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                });
                            }

                        } catch (error) {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: 'Something went wrong!',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                        }
                    });


                });


                // Event Delegation for dynamically created buttons
                document.querySelector('tbody').addEventListener('click', function (e) {
                    // Edit button handling
                    if (e.target.classList.contains('edit-btn')) {
                        const row = e.target.closest("tr");
                        const couponData = {
                            id: e.target.dataset.id,
                            name: row.querySelector("td:nth-child(1)").textContent.trim(),
                            code: row.querySelector(".code").textContent.trim(),
                            createdOn: row.querySelector("td:nth-child(3)").textContent.trim(),
                            expireOn: row.querySelector("td:nth-child(4)").textContent.trim(),
                            expireOnTime: row.querySelector("td:nth-child(5)").textContent.trim(),
                            amount: row.querySelector(".amount").textContent.replace("₹", "").trim(),
                            minimumPrice: row.querySelector(".min").textContent.replace("₹", "").trim(),
                            maxUsage: row.querySelector(".usage").textContent.trim(),
                            isList: row.querySelector("[id^='visibleStatus']").textContent.trim() === "Public"
                        };

                        // Populate the form
                        document.getElementById('name').value = couponData.name;
                        document.getElementById('code').value = couponData.code;
                        document.getElementById('amount').value = couponData.amount;
                        document.getElementById('minimumPrice').value = couponData.minimumPrice;
                        document.getElementById('maxUsage').value = couponData.maxUsage;
                        document.getElementById('isList').value = couponData.isList ? "true" : "false";

                        // Split the date part ("15 Sep 2025")
                        const [day, monthName, year] = couponData.expireOn.split(" ");

                        // Get the time part ("05:35" or similar)
                        const time = couponData.expireOnTime;

                        const monthMap = {
                            "Jan": "01", "Feb": "02", "Mar": "03", "Apr": "04",
                            "May": "05", "Jun": "06", "Jul": "07", "Aug": "08",
                            "Sep": "09", "Sept": "09",  // include both to be safe
                            "Oct": "10", "Nov": "11", "Dec": "12"
                        };

                        // Format the date for datetime-local input (YYYY-MM-DDTHH:MM)
                        const formattedDate = `${year}-${monthMap[monthName]}-${day.padStart(2, "0")}T${time.slice(0, 5)}`;

                        console.log(formattedDate);
                        document.getElementById('expireOn').value = formattedDate;

                        couponId.value = couponData.id;

                        // Update modal title and show
                        modalTitle.textContent = 'Edit Coupon';
                        couponModal.classList.add('show');
                    }

                    // Delete button handling
                    else if (e.target.classList.contains('delete-btn')) {
                        const code = e.target.getAttribute('data-id');
                        const row = e.target.closest('tr');
                        const couponName = row.querySelector('td:first-child').textContent;

                        // Your existing delete logic here
                        (async () => {
                            const { isConfirmed } = await Swal.fire({
                                title: 'Are you sure?',
                                text: `You are about to delete the coupon "${couponName}". This action cannot be undone.`,
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#d33',
                                cancelButtonColor: '#6b7280',
                                confirmButtonText: 'Yes, delete it!'
                            });

                            if (isConfirmed) {
                                const response = await fetch(`/admin/deleteCoupon?code=${encodeURIComponent(code)}`, {
                                    method: 'DELETE',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                });

                                if (response.ok) {
                                    row.remove();
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: 'Coupon deleted successfully',
                                        showConfirmButton: false,
                                        timer: 2000,
                                        timerProgressBar: true
                                    });
                                } else {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: 'Something went wrong!',
                                        showConfirmButton: false,
                                        timer: 2000,
                                        timerProgressBar: true
                                    });
                                }
                            }
                        })();
                    }

                    // List/Unlist button handling
                    // else if (e.target.classList.contains('list-btn')) {
                    //     const code = e.target.getAttribute('data-id');
                    //     const visibleStatus = document.getElementById(`visibleStatus${code}`);
                    //     const currentStatus = e.target.getAttribute('data-status');

                    //     // Your existing list/unlist logic here
                    //     (async () => {
                    //         try {
                    //             const action = currentStatus === 'private' ? 'List' : 'unList';
                    //             const { isConfirmed } = await Swal.fire({
                    //                 title: `Are you sure?`,
                    //                 text: `Do you want to ${action} this coupon?`,
                    //                 icon: "warning",
                    //                 showCancelButton: true,
                    //                 confirmButtonText: `Yes, ${action}`,
                    //                 cancelButtonText: "Cancel",
                    //                 reverseButtons: true
                    //             });

                    //             if (isConfirmed) {
                    //                 const response = await fetch(`/admin/listUnlistCoupon?code=${encodeURIComponent(code)}`);
                    //                 if (response.ok) {
                    //                     e.target.setAttribute("data-status", currentStatus === "private" ? "Public" : "private");
                    //                     e.target.textContent = currentStatus === 'private' ? 'unList' : 'List';
                    //                     visibleStatus.textContent = currentStatus === 'private' ? 'Public' : 'Private';
                    //                 } else {
                    //                     Swal.fire({
                    //                         toast: true,
                    //                         position: 'top-end',
                    //                         icon: 'error',
                    //                         title: 'Something went wrong!',
                    //                         showConfirmButton: false,
                    //                         timer: 2000,
                    //                         timerProgressBar: true
                    //                     });
                    //                 }
                    //             }
                    //         } catch (error) {
                    //             Swal.fire({
                    //                 toast: true,
                    //                 position: 'top-end',
                    //                 icon: 'error',
                    //                 title: 'Something went wrong!',
                    //                 showConfirmButton: false,
                    //                 timer: 2000,
                    //                 timerProgressBar: true
                    //             });
                    //         }
                    //     })();
                    // }



                });


                let oldHtml = document.getElementById('tableBody');

                async function pagination(currentPage, btn) {
                    try {
                        currentPage = parseInt(currentPage);
                        let page = btn === 'next' ? currentPage + 1 : currentPage - 1;
                        let query = document.getElementById('searchInput').value


                        const response = await fetch(`/admin/getCouponPage?page=${encodeURIComponent(page)}&search=${encodeURIComponent(query)}`, {
                            headers: { "Accept": "application/json" }
                        });

                        if (response.ok) {
                            const result = await response.json();

                            let rows = result.coupons.map(cpn => {
                                const dateObj = new Date(cpn.expireOn);

                                // Format time in 24-hour HH:MM
                                const timeStr = dateObj.toLocaleTimeString("en-GB", {
                                    hour: "2-digit",
                                    minute: "2-digit"
                                });


                                return `
                <tr>
                    <td>${cpn.name}</td>
                    <td><span class="code">${cpn.code}</span></td>
                    <td>${new Date(cpn.createdOn).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" })}</td>
                    <td>${new Date(cpn.expireOn).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" })}</td>
                    <td>
  <span>
    ${timeStr}
  </span>
</td>
                    <td class="amount">₹${cpn.amount}</td>
                    <td class="min">₹${cpn.minimumPrice}</td>
                    <td>
                        ${new Date(cpn.expireOn) < new Date(result.currentDate)
                                        ? '<span class="badge expired" style="color:red;">Expired</span>'
                                        : '<span class="badge expired" style="color:green;">Valid</span>'
                                    }
                    </td>
                    <td>
                        ${cpn.isList
                                        ? `<span id="visibleStatus${cpn.code}" class="badge private">Public</span>`
                                        : `<span id="visibleStatus${cpn.code}" class="badge private">Private</span>`
                                    }
                    </td>
                    <td><span class="usage">${cpn.maxUsage}</span></td>
                    <td class="actions">
                        <button class="btn btn-soft btn-small edit-btn" data-id="${cpn._id}">Edit</button>
                        ${cpn.isList
                                        ? `<button class="btn btn-neutral btn-small list-btn" data-id="${cpn.code}" data-status="private">unList</button>`
                                        : `<button class="btn btn-neutral btn-small list-btn" data-id="${cpn.code}" data-status="Public">List</button>`
                                    }
                        <button class="btn btn-neutral btn-small delete-btn" data-id="${cpn.code}">Delete</button>
                    </td>
                </tr>
                `;
                            }).join("");


                            oldHtml.innerHTML = rows;


                            const paginationDiv = document.querySelector(".pagination");
                            let paginationHTML = "";

                            if (result.currentPage > 1) {
                                paginationHTML += `<button onclick="pagination(${result.currentPage}, 'previous')">&#9664;</button>`;
                            }

                            paginationHTML += `
                <div class="page-box">${result.currentPage}</div>
                <span>of ${result.totalPage}</span>
            `;

                            if (result.currentPage < result.totalPage) {
                                paginationHTML += `<button onclick="pagination(${result.currentPage}, 'next')">&#9654;</button>`;
                            }

                            paginationDiv.innerHTML = paginationHTML;

                        } else {
                            alert("its not ok");
                        }
                    } catch (error) {
                        console.error(error);
                    }
                }

                const searchBtn = document.getElementById('searchBtn')
                const resetBtn = document.getElementById('resetBtn')
                const searchForm = document.querySelector('.search-form')
                const searchInput = document.getElementById('searchInput')
                const currentPageElement = document.getElementById('currentPage')
                const searchResetBtn = document.getElementById('searchResetBtn')

                // Handle search form submission



                searchForm.addEventListener('submit', async function (e) {
                    e.preventDefault()
                    try {
                        const searchValue = searchInput.value.trim()
                        const currentPage = currentPageElement.textContent.trim()

                        const response = await fetch(`/admin/getCouponPage?search=${encodeURIComponent(searchValue)}&page=${encodeURIComponent(currentPage)}`, {
                            headers: { 'Accept': 'application/json' }
                        });

                        if (response.ok) {
                            const result = await response.json();
                            let rows = result.coupons.map(cpn => {
                                return `
                <tr>
                    <td>${cpn.name}</td>
                    <td><span class="code">${cpn.code}</span></td>
                    <td>${new Date(cpn.createdOn).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" })}</td>
                    <td>${new Date(cpn.expireOn).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" })}</td>
                    <td>
                        <span>
    ${new Date(cpn.expireOn).toLocaleTimeString("en-GB", {
                                    hour: "2-digit",
                                    minute: "2-digit"
                                })}
  </span>
                    </td>
                    <td class="amount">₹${cpn.amount}</td>
                    <td class="min">₹${cpn.minimumPrice}</td>
                    <td>
                        ${new Date(cpn.expireOn) < new Date(result.currentDate)
                                        ? '<span class="badge expired" style="color:red;">Expired</span>'
                                        : '<span class="badge expired" style="color:green;">Valid</span>'
                                    }
                    </td>
                    <td>
                        ${cpn.isList
                                        ? `<span id="visibleStatus${cpn.code}" class="badge private">Public</span>`
                                        : `<span id="visibleStatus${cpn.code}" class="badge private">Private</span>`
                                    }
                    </td>
                    <td><span class="usage">${cpn.maxUsage}</span></td>
                    <td class="actions">
                        <button class="btn btn-soft btn-small edit-btn" data-id="${cpn._id}">Edit</button>
                        ${cpn.isList
                                        ? `<button class="btn btn-neutral btn-small list-btn" data-id="${cpn.code}" data-status="private">unList</button>`
                                        : `<button class="btn btn-neutral btn-small list-btn" data-id="${cpn.code}" data-status="Public">List</button>`
                                    }
                        <button class="btn btn-neutral btn-small delete-btn" data-id="${cpn.code}">Delete</button>
                    </td>
                </tr>
                `;
                            }).join("");

                            oldHtml.innerHTML = rows;

                            const paginationDiv = document.querySelector(".pagination");
                            let paginationHTML = "";

                            if (result.currentPage > 1) {
                                paginationHTML += `<button onclick="pagination(${result.currentPage}, 'previous')">&#9664;</button>`;
                            }

                            paginationHTML += `
                <div class="page-box">${result.currentPage}</div>
                <span>of ${result.totalPage}</span>
            `;

                            if (result.currentPage < result.totalPage) {
                                paginationHTML += `<button onclick="pagination(${result.currentPage}, 'next')">&#9654;</button>`;
                            }

                            paginationDiv.innerHTML = paginationHTML;
                        } else {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: 'Failed to fetch coupons!',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Something went wrong!',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                        console.error('Search error:', error);
                    }
                });

                // Handle reset button
                searchResetBtn.addEventListener('click', async function (e) {
                    e.preventDefault()
                    try {
                        if (!searchInput.value) return
                        const searchValue = ''
                        searchInput.value = ''
                        const currentPage = currentPageElement.textContent.trim()

                        const response = await fetch(`/admin/getCouponPage?search=${encodeURIComponent(searchValue)}&page=${encodeURIComponent(currentPage)}`, {
                            headers: { 'Accept': 'application/json' }
                        });

                        if (response.ok) {
                            const result = await response.json();
                            let rows = result.coupons.map(cpn => {
                                return `
                <tr>
                    <td>${cpn.name}</td>
                    <td><span class="code">${cpn.code}</span></td>
                    <td>${new Date(cpn.createdOn).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" })}</td>
                    <td>${new Date(cpn.expireOn).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" })}</td>
                      <td>
                        <span>
    ${new Date(cpn.expireOn).toLocaleTimeString("en-GB", {
                                    hour: "2-digit",
                                    minute: "2-digit"
                                })}
  </span>
                    </td>
                    <td class="amount">₹${cpn.amount}</td>
                    <td class="min">₹${cpn.minimumPrice}</td>
                    <td>
                        ${new Date(cpn.expireOn) < new Date(result.currentDate)
                                        ? '<span class="badge expired" style="color:red;">Expired</span>'
                                        : '<span class="badge expired" style="color:green;">Valid</span>'
                                    }
                    </td>
                    <td>
                        ${cpn.isList
                                        ? `<span id="visibleStatus${cpn.code}" class="badge private">Public</span>`
                                        : `<span id="visibleStatus${cpn.code}" class="badge private">Private</span>`
                                    }
                    </td>
                    <td><span class="usage">${cpn.maxUsage}</span></td>
                    <td class="actions">
                        <button class="btn btn-soft btn-small edit-btn" data-id="${cpn._id}">Edit</button>
                        ${cpn.isList
                                        ? `<button class="btn btn-neutral btn-small list-btn" data-id="${cpn.code}" data-status="private">unList</button>`
                                        : `<button class="btn btn-neutral btn-small list-btn" data-id="${cpn.code}" data-status="Public">List</button>`
                                    }
                        <button class="btn btn-neutral btn-small delete-btn" data-id="${cpn.code}">Delete</button>
                    </td>
                </tr>
                `;
                            }).join("");

                            oldHtml.innerHTML = rows;

                            const paginationDiv = document.querySelector(".pagination");
                            let paginationHTML = "";

                            if (result.currentPage > 1) {
                                paginationHTML += `<button onclick="pagination(${result.currentPage}, 'previous')">&#9664;</button>`;
                            }

                            paginationHTML += `
                <div class="page-box">${result.currentPage}</div>
                <span>of ${result.totalPage}</span>
            `;

                            if (result.currentPage < result.totalPage) {
                                paginationHTML += `<button onclick="pagination(${result.currentPage}, 'next')">&#9654;</button>`;
                            }

                            paginationDiv.innerHTML = paginationHTML;
                        } else {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: 'Failed to fetch coupons!',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Something went wrong!',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                        console.error('Search error:', error);
                    }
                }
                )


                async function forSearch(e) {
                    e.preventDefault()
                    try {
                        const searchValue = searchInput.value.trim()
                        const currentPage = currentPageElement.textContent.trim()

                        const response = await fetch(`/admin/getCouponPage?search=${encodeURIComponent(searchValue)}&page=${encodeURIComponent(currentPage)}`, {
                            headers: { 'Accept': 'application/json' }
                        });

                        if (response.ok) {
                            const result = await response.json();
                            let rows = result.coupons.map(cpn => {
                                return `
                <tr>
                    <td>${cpn.name}</td>
                    <td><span class="code">${cpn.code}</span></td>
                    <td>${new Date(cpn.createdOn).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" })}</td>
                    <td>${new Date(cpn.expireOn).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" })}</td>
                    <td class="amount">₹${cpn.amount}</td>
                    <td class="min">₹${cpn.minimumPrice}</td>
                    <td>
                        ${new Date(cpn.expireOn) < new Date(result.currentDate)
                                        ? '<span class="badge expired" style="color:red;">Expired</span>'
                                        : '<span class="badge expired" style="color:green;">Valid</span>'
                                    }
                    </td>
                    <td>
                        ${cpn.isList
                                        ? `<span id="visibleStatus${cpn.code}" class="badge private">Public</span>`
                                        : `<span id="visibleStatus${cpn.code}" class="badge private">Private</span>`
                                    }
                    </td>
                    <td><span class="usage">${cpn.maxUsage}</span></td>
                    <td class="actions">
                        <button class="btn btn-soft btn-small edit-btn" data-id="${cpn._id}">Edit</button>
                        ${cpn.isList
                                        ? `<button class="btn btn-neutral btn-small list-btn" data-id="${cpn.code}" data-status="private">unList</button>`
                                        : `<button class="btn btn-neutral btn-small list-btn" data-id="${cpn.code}" data-status="Public">List</button>`
                                    }
                        <button class="btn btn-neutral btn-small delete-btn" data-id="${cpn.code}">Delete</button>
                    </td>
                </tr>
                `;
                            }).join("");

                            oldHtml.innerHTML = rows;

                            const paginationDiv = document.querySelector(".pagination");
                            let paginationHTML = "";

                            if (result.currentPage > 1) {
                                paginationHTML += `<button onclick="pagination(${result.currentPage}, 'previous')">&#9664;</button>`;
                            }

                            paginationHTML += `
                <div class="page-box">${result.currentPage}</div>
                <span>of ${result.totalPage}</span>
            `;

                            if (result.currentPage < result.totalPage) {
                                paginationHTML += `<button onclick="pagination(${result.currentPage}, 'next')">&#9654;</button>`;
                            }

                            paginationDiv.innerHTML = paginationHTML;
                        } else {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: 'Failed to fetch coupons!',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Something went wrong!',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                        console.error('Search error:', error);
                    }
                }

            </script>
</body>

</html>
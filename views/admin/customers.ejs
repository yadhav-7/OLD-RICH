<link rel="stylesheet" href="/admin/customers.css">

<%- include('../../views/partials/admin/adminHeaders', {title: 'adminHeader-page' }) %>

    <%- include('../../views/partials/admin/adminSidebar', {title: 'adminSidebar-page' }) %>

        <div class="main-content">

            <h1>Customer</h1>

            <div class="search-container">
                <div class="search-wrapper">
                    <input type="text" id="search-input" placeholder="Search customers...">
                    <button id="clear-button" aria-label="Clear search">Ã—</button>
                </div>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone No</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="user-table">
                    <% for(let i=0 ; i<data.length ; i ++){ %>
                        <tr>
                            <td>
                                <%= data[i].username %>
                            </td>
                            <td>
                                <%= data[i].email %>
                            </td>
                            <td>
                                <%= data[i].phone %>
                            </td>
                            <td class="action-buttons">
                                <% if(data[i].isBlock===false){ %>

                                    <button class="block-btn"
                                        onclick="blockPermission('<%= data[i]._id %>', '<%= data[i].username %>')">Block</button>

                                    <% }else{ %>

                                        <button class="unblock-btn"
                                            onclick="unblockPermission('<%= data[i]._id%>','<%= data[i].username%>')">Unblock</button>

                                        <% } %>
                            </td>
                        </tr>
                        <%}%>
                </tbody>
            </table>


            <div id="pagination" style=" display: flex; justify-content: center; align-items: center; gap: 10px; margin:
                30px 0;">

                <% if(currentPage>1){ %>
                    <a href="/admin/users?page=<%= currentPage-1 %>"
                        style="display: inline-block; padding: 8px 16px; text-decoration: none; color: #333; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; font-size: 16px; min-width: 40px; text-align: center; transition: all 0.3s ease; cursor: pointer;">&laquo;</a>
                    <% } %>


                        <a href="#"
                            style="display: inline-block; padding: 8px 16px; text-decoration: none; color: white; background-color: #007bff; border: 1px solid #007bff; border-radius: 8px; font-size: 16px; min-width: 40px; text-align: center; font-weight: bold; transition: all 0.3s ease; cursor: pointer;">
                            <%= currentPage %>
                        </a>


                        <% if(currentPage<totalPages){ %>
                            <a href="/admin/users?page=<%= currentPage+1 %>"
                                style="display: inline-block; padding: 8px 16px; text-decoration: none; color: #333; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; font-size: 16px; min-width: 40px; text-align: center; transition: all 0.3s ease; cursor: pointer;">&raquo;</a>
                            <% } %>
            </div>



        </div>



        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <!-- Font Awesome for icons -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/js/all.min.js"></script>

        <!-- You'll need this script to handle sidebar toggling -->
        <script>
            // This would be triggered by your sidebar toggle button
            function toggleSidebar() {
                document.body.classList.toggle('collapsed');
            }

            // For mobile view
            function toggleMobileSidebar() {
                document.body.classList.toggle('sidebar-open');
            }

            async function blockPermission(userId, userName) {
                const { isConfirmed } = await Swal.fire({
                    title: `Block ${userName}?`,
                    text: "Are you sure.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, block',
                    cancelButtonText: 'Cancel',
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                });

                if (isConfirmed) {
                    try {
                        // Send data to backend

                        const response = await fetch('/admin/blockCustomer', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',

                            },
                            body: JSON.stringify({
                                user_id: userId,
                                user_name: userName
                            }),
                        });

                        const result = await response.json();

                        if (response.ok) {
                            Swal.fire({
                                title: 'Success!',
                                text: `${userName} has been blocked.`,
                                icon: 'success',
                                timer: 1500,
                                timerProgressBar: true,
                                showConfirmButton: false
                            });

                            setTimeout(() => {
                                window.location.reload()
                            }, 1500)
                        } else {

                            throw new Error(result.message || "Failed to block user");
                        }
                    } catch (error) {

                        Swal.fire('Error!', error.message, 'error');
                    }
                }
            }


            async function unblockPermission(userId, userName) {
                const { isConfirmed } = await Swal.fire({
                    toast:true,
                    title: `UnBlock ${userName}?`,
                    text: "Are you sure.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Sure',
                    cancelButtonText: 'No',
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                });

                if (isConfirmed) {
                    try {
                        const response = await fetch('/admin/unBlockCustomer', {
                            method: 'post',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                userId: userId
                            })
                        })

                        const result = await response.json()

                        if (response.ok) {
                            Swal.fire({
                                toast:true,
                                title: 'Success!',
                                text: `${userName} has been Unblocked.`,
                                icon: 'success',
                                timer: 1500,
                                timerProgressBar: true,
                                showConfirmButton: false
                            });

                            setTimeout(() => {
                                window.location.reload()
                            }, 1500)
                        } else {
                            throw new Error(result.message || "Failed to unblock user");
                        }
                    } catch (error) {
                        Swal.fire('Error!', error.message, 'error');
                    }
                }
            }

            const searchInput = document.getElementById('search-input');
            const clearBtn = document.getElementById('clear-button');
            const table = document.getElementById('user-table');
            const pagination = document.getElementById('pagination')

            //function to fetch & render products
            const fetchAndRenderProducts = async (search) => {

                try {
                    const res = await fetch(`/admin/users?search=${encodeURIComponent(search)}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    const result = await res.json();
                    const user = result.data;
                    const currentPage = result.currentPage
                    const totalPages=result.totalPages

                    table.innerHTML = '';

                    if (user.length === 0) {
                        table.innerHTML = '<tr><td colspan="6" style="text-align:center;">No products found</td></tr>';
                    } else {
                        user.forEach(user => {
                            table.innerHTML += `
                          <tr>
                          <td>${user.username}</td>
                          <td>${user.email}</td>
                          <td>${user.phone}</td>
                           <td class="action-buttons">
                             ${user.isBlock === false
                                    ? `<button class="block-btn" onclick="blockPermission('${user._id}', '${user.username}')">Block</button>`
                                    : `<button class="unblock-btn" onclick="unblockPermission('${user._id}', '${user.username}')">Unblock</button>`
                                }
                             </td>
                            </tr> `;
                        });


                        pagination.innerHTML = `
  <div id="pagination-container" style="display: flex; justify-content: center; align-items: center; gap: 10px; margin: 30px 0;">
    ${currentPage > 1 ? `
      <a href="/admin/users?page=${currentPage - 1}" style="display: inline-block; padding: 8px 16px; text-decoration: none; color: #333; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; font-size: 16px; min-width: 40px; text-align: center; transition: all 0.3s ease; cursor: pointer;">&laquo;</a>
    ` : ''}

    <a href="${currentPage}" style="display: inline-block; padding: 8px 16px; text-decoration: none; color: white; background-color: #007bff; border: 1px solid #007bff; border-radius: 8px; font-size: 16px; min-width: 40px; text-align: center; font-weight: bold; transition: all 0.3s ease; cursor: pointer;">${currentPage}</a>

    ${currentPage < totalPages ? `
      <a href="/admin/users?page=${currentPage + 1}" style="display: inline-block; padding: 8px 16px; text-decoration: none; color: #333; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; font-size: 16px; min-width: 40px; text-align: center; transition: all 0.3s ease; cursor: pointer;">&raquo;</a>
    ` : ''}
  </div>
`;


                    }

                } catch (err) {
                    console.error('Error fetching products:', err);
                }
            };

            // On keyup search
            searchInput.addEventListener('keyup', () => {

                const searchValue = searchInput.value || '';
                if(searchValue!==''){
                fetchAndRenderProducts(searchValue);
                }else{
                    window.location.reload()
                }
            });

            // On clear button click
            clearBtn.addEventListener('click', () => {
                searchInput.value = '';
                window.location.reload()

            });

        </script>

<link rel="stylesheet" href="/admin/editCategory.css">

<%- include('../../views/partials/admin/adminHeaders', { title: 'adminHeader-page' }) %>
<%- include('../../views/partials/admin/adminSidebar', { title: 'adminSidebar-page' }) %>

<div class="form-container">
    <h2>Edit Category</h2>
    <form id="editForm" data-id="<%= category._id %>" novalidate>
        <label for="name">Category Name</label>
        <input type="text" id="name" data-name="<%= category.name %>" name="name" aria-label="Category Name" value="<%= category.name %>">

        <label for="description">Description</label>
        <textarea id="description" data-description="<%= category.description %>" name="description" aria-label="Description" rows="4" required><%= category.description %></textarea>

        <div class="button-group">
            <button type="submit">Save Changes</button>
            <button type="button" onclick="window.history.back()">Cancel</button>
        </div>

        <div id="error-message" class="text-danger mt-2"></div>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    const form = document.getElementById('editForm');
const id = form.dataset.id;
const nameInput = document.getElementById('name');
const descInput = document.getElementById('description');
const errorBox = document.getElementById('error-message');

// Get initial values from data attributes
const initialName = form.querySelector('#name').dataset.name.trim();
const initialDescription = form.querySelector('#description').dataset.description.trim();

form.addEventListener('submit', async function (e) {
    e.preventDefault();
    errorBox.innerText = '';

    const name = nameInput.value.trim();
    const description = descInput.value.trim();

    // Check if values have actually changed
    if (name === initialName && description === initialDescription) {
        errorBox.innerText = 'No changes were made to the category.';
        return;
    }

    const validationError = validateInputs(name, description);
    if (validationError.length > 0) {
        errorBox.innerText = validationError.join('\n');
        return;
    }

    try {
        const response = await fetch(`/admin/editCategory/${id}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, description })
        });

        const result = await response.json();

        if (!response.ok) {
            errorBox.innerText = result.message || 'Something went wrong!';
        } else {
            await Swal.fire({
                title: result.message,
                icon: 'success',
                confirmButtonText: 'OK'
            });
            window.location.href = '/admin/category'; // redirect if needed
        }
    } catch (err) {
        errorBox.innerText = 'Something went wrong. Please try again.';
        console.error(err);
    }
});

function validateInputs(name, description) {
    const errors = [];

    // Reset borders
    nameInput.style.border = '';
    descInput.style.border = '';

    if (!name) {
        errors.push("Category name is required.");
        nameInput.style.border = "2px solid red";
    } else if (name.length < 3) {
        errors.push("Category name must be at least 3 characters.");
        nameInput.style.border = "2px solid red";
    } else if (!/^[A-Za-z][A-Za-z\s]*$/.test(name)) {
        errors.push("Category name should start with a letter and contain only letters and spaces.");
        nameInput.style.border = "2px solid red";
    }

    if (!description) {
        errors.push("Description is required.");
        descInput.style.border = "2px solid red";
    } else if (description.length < 10) {
        errors.push("Description must be at least 10 characters.");
        descInput.style.border = "2px solid red";
    } else if (/^(.)\1*$/.test(description)) {
        errors.push("Description should not be repetitive or meaningless.");
        descInput.style.border = "2px solid red";
    }

    return errors;
}
</script>
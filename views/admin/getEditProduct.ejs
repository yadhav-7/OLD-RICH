<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <style>
        :root {
            --sidebar-width: 250px;
            --navbar-height: 60px;
            --primary-color: #4e73df;
            --secondary-color: #f8f9fc;
        }

        body {
            font-family: 'Nunito', sans-serif;
            background-color: #f8f9fc;
            overflow-x: hidden;
        }

        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: var(--navbar-height);
            background: white;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            z-index: 1030;
            padding: 0 20px;
        }

        .sidebar {
            position: fixed;
            top: var(--navbar-height);
            left: 0;
            bottom: 0;
            width: var(--sidebar-width);
            background: #fff;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            z-index: 1020;
            transition: all 0.3s;
            overflow-y: auto;
        }

        .main-content {
            margin-left: var(--sidebar-width);
            margin-top: var(--navbar-height);
            padding: 20px;
            min-height: calc(100vh - var(--navbar-height));
            background-color: #f8f9fc;
        }

        .card {
            border: none;
            border-radius: 0.35rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
            margin-bottom: 20px;
        }

        .card-header {
            background-color: #f8f9fc;
            border-bottom: 1px solid #e3e6f0;
            padding: 1rem 1.35rem;
            font-weight: 600;
            color: #4e73df;
        }

        .form-control {
            border: 1px solid #d1d3e2;
            border-radius: 0.35rem;
            padding: 0.75rem 1rem;
        }

        .form-label {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #5a5c69;
        }

        .required:after {
            content: " *";
            color: #e74a3b;
        }

        .error-message {
            color: #e74a3b;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .image-uploader {
            border: 2px dashed #d1d3e2;
            border-radius: 0.35rem;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            background-color: #fff;
        }

        .image-uploader:hover {
            border-color: #4e73df;
            background-color: #f8f9fe;
        }

        .image-uploader i {
            font-size: 2rem;
            color: #dddfeb;
            margin-bottom: 1rem;
        }

        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 15px;
        }

        .thumbnail {
            position: relative;
            width: 100px;
            height: 100px;
            border-radius: 0.35rem;
            overflow: hidden;
            border: 1px solid #e3e6f0;
            transition: all 0.2s;
        }

        .thumbnail:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .thumbnail.main-image {
            border: 2px solid #4e73df;
        }

        .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            width: 24px;
            height: 24px;
            background: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .thumbnail:hover .remove-btn {
            opacity: 1;
        }

        .main-image-badge {
            position: absolute;
            bottom: 5px;
            left: 5px;
            background: #4e73df;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.7rem;
        }

        .btn-primary {
            background-color: #4e73df;
            border-color: #4e73df;
        }

        .btn-primary:hover {
            background-color: #2e59d9;
            border-color: #2653d4;
        }

        .cropper-actions {
            display: flex;
            justify-content: flex-end;
            padding: 1rem;
            border-top: 1px solid #e3e6f0;
            gap: 10px;
        }

        .img-container {
            height: 500px;
            max-width: 100%;
        }

        .aspect-ratio-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.show {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }
        }
    </style>
</head>

<body>
    <!-- Navbar -->
    <%- include('../../views/partials/admin/adminHeaders', {title: 'adminHeader-page' }) %>

        <div class="d-flex">
            <!-- Sidebar -->
            <%- include('../../views/partials/admin/adminSidebar', {title: 'adminSidebar-page' }) %>

                <!-- Main Content -->
                <div class="main-content">
                    <div class="container">
                        <div class="header mb-4">
                            <h1 class="page-title">Add New Product</h1>
                        </div>

                        <form id="productForm" method="POST" action="/admin/editProduct/<%= product._id%>"
                            enctype="multipart/form-data">
                            <!-- Basic Information Card -->
                            <div class="card mb-4">
                                <div class="card-header">Basic Information</div>
                                <div class="card-body">
                                    <div class="form-group mb-4">
                                        <label for="product_name" class="form-label required">Product Name</label>
                                        <input type="text" placeholder="Enter product name" name="productName"
                                            class="form-control" id="product_name" value="<%= product.productName %>">
                                        <div id="productName-error" class="error-message"></div>
                                    </div>

                                    <div class="form-group">
                                        <label class="form-label required">Description</label>
                                        <textarea placeholder="Enter detailed product description" id="description"
                                            name="description" class="form-control"
                                            rows="5"><%= product.description %></textarea>
                                        <div id="description-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Product Details Card -->
                            <div class="card mb-4">
                                <div class="card-header">Product Details</div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="form-label">Color</label>
                                                <input name="color" type="text" class="form-control"
                                                    placeholder="e.g., Red, Blue" value="<%= product.color %>">
                                                <div id="color-error" class="error-message"></div>
                                            </div>
                                        </div>

                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="form-label required">Category</label>
                                                <select class="form-control" name="category">
                                                    <% for(let i=0; i < category.length; i++) { %>
                                                        <option value="<%= category[i].name %>"
                                                            <%=product.category===category[i].name ? 'selected' : '' %>>
                                                            <%= category[i].name %>
                                                        </option>
                                                        <% } %>
                                                </select>
                                                <div id="category-error" class="error-message"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Size Variants Card -->
                            <div class="card mb-4">
                                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">Size Variants</h5>
                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                                        data-bs-target="#sizeModal">
                                        <i class="fas fa-plus me-1"></i> Add Size
                                    </button>
                                </div>

                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-bordered table-hover">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Size</th>
                                                    <th>Regular Price</th>
                                                    <th>Sale Price</th>
                                                    <th>Stock</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="sizeTableBody">
                                                <% for(let i=0 ; i < product.variants?.length; i++){%>
                                                    <tr data-variant-id="<%= product.variants[i]?._id %>">
                                                        <td>
                                                            <% const sizes=['S', 'M' , 'L' , 'XL' , 'XXL' ]; const
                                                                currentSize=product.variants[i]?.size; %>
                                                                <input type="hidden" name="variants[<%= i %>][_id]"
                                                                    value="<%= product.variants[i]?._id %>">
                                                                <select id="siz-E" name="variants[<%= i %>][size]"
                                                                    class="form-control">
                                                                    <% sizes.forEach(size=> { %>
                                                                        <option value="<%= size %>"
                                                                            <%=size===currentSize ? 'selected' : '' %>>
                                                                            <%= size %>
                                                                        </option>
                                                                        <% }) %>
                                                                </select>
                                                        </td>

                                                        <td><input id="regular-Price" type="number" class="form-control"
                                                                name="variants[<%= i %>][regularPrice]"
                                                                value="<%= product.variants[i]?.regularPrice%>"></td>

                                                        <td><input id="sale-Price" type="number" class="form-control"
                                                                name="variants[<%= i %>][salePrice]"
                                                                value="<%= product.variants[i]?.salePrice%>"></td>

                                                        <td><input id="qnty" type="number" class="form-control"
                                                                name="variants[<%= i %>][quantity]"
                                                                value="<%= product.variants[i]?.quantity%>"></td>
                                                        <td>
                                                            <button
                                                                class="btn btn-sm btn-outline-secondary remove-variant-btn"
                                                                onclick="event.preventDefault(); removeVariantSize('<%= product.variants[i]?.size %>', '<%= product._id %>')"
                                                                data-variant="<%= product.variants[i]?.size %>"
                                                                data-productid="<%= product._id %>">
                                                                Remove Variant
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <% } %>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <!-- Product Images Card -->
                            <div class="card mb-4">
                                <div class="card-header">Product Images (Max 4)</div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <div id="addedImagesContainer" class="thumbnails-container">
                                            <% if (product.productImage && product.productImage.length> 0) { %>
                                                <% product.productImage.forEach((image, index)=> { %>
                                                    <div class="thumbnail <%= index === 0 ? 'main-image' : '' %>"
                                                        data-type="existing" data-name="<%= image %>">
                                                        <img src="/Uploads/<%= image %>" alt="Product Image">
                                                        <button class="remove-btn">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                        <% if (index===0) { %>
                                                            <span class="main-image-badge">Main</span>
                                                            <% } %>
                                                    </div>
                                                    <% }); %>
                                                        <% } %>
                                        </div>

                                        <div class="image-uploader" id="uploadArea">
                                            <i class="fas fa-cloud-upload-alt"></i>
                                            <p>Drag & drop images here or click to browse</p>
                                            <small>Recommended size: 800x800px (max 5MB each)</small>
                                            <input type="file" id="imageUpload" name="images" accept="image/*" multiple
                                                style="display: none;">
                                            <input type="hidden" name="existingImages" id="existingImagesInput"
                                                value="<%= product.images ? product.images.join(',') : '' %>">
                                            <input type="hidden" name="mainImage" id="mainImageInput"
                                                value="<%= product.images && product.images.length > 0 ? product.images[0] : '' %>">
                                        </div>
                                        <div id="images-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Size Table Modal -->
                            <div class="modal fade" id="sizeModal" tabindex="-1" aria-labelledby="sizeModalLabel"
                                aria-hidden="true">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="sizeModalLabel">Add New Size Variant</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="form-group mb-3">
                                                <label class="form-label">Size</label>
                                                <select class="form-control" id="newSizeSelect">
                                                    <option value="S">S</option>
                                                    <option value="M">M</option>
                                                    <option value="L">L</option>
                                                    <option value="XL">XL</option>
                                                    <option value="XXL">XXL</option>
                                                </select>
                                            </div>
                                            <div class="form-group mb-3">
                                                <label class="form-label">Regular Price</label>
                                                <input type="number" class="form-control" id="newRegularPrice" min="0"
                                                    step="0.01">
                                            </div>
                                            <div class="form-group mb-3">
                                                <label class="form-label">Sale Price</label>
                                                <input type="number" class="form-control" id="newSalePrice" min="0"
                                                    step="0.01">
                                            </div>
                                            <div class="form-group mb-3">
                                                <label class="form-label">Stock Quantity</label>
                                                <input type="number" class="form-control" id="newStockQuantity" min="0">
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary"
                                                data-bs-dismiss="modal">Cancel</button>
                                            <button type="button" class="btn btn-primary" onclick="addNewVariant()">Add
                                                Variant</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Form Actions -->
                            <div class="form-group text-end mt-4">
                                <button type="button" class="btn btn-light me-2">Cancel</button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>Publish Product
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
        </div>

        <!-- Cropper Modal -->
        <div class="modal fade" id="cropperModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Crop Image</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="aspect-ratio-buttons mb-3">
                            <button type="button" class="btn btn-outline-secondary" data-ratio="1">1:1 (Square)</button>
                            <button type="button" class="btn btn-outline-secondary" data-ratio="0.75">4:3</button>
                            <button type="button" class="btn btn-outline-secondary" data-ratio="0.5625">16:9</button>
                            <button type="button" class="btn btn-outline-secondary" data-ratio="free">Free</button>
                        </div>
                        <div class="img-container">
                            <img id="cropperImage" src="" alt="">
                        </div>
                    </div>
                    <div class="cropper-actions">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="saveCroppedImage">Save</button>
                    </div>
                </div>
            </div>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
        <script>
            let sizeCounter = 0;
const MAX_IMAGES = 4;
const MAX_FILE_SIZE = 5 * 1024 * 1024;
const ACCEPTED_TYPES = ['image/jpeg', 'image/png', 'image/webp'];

document.addEventListener('DOMContentLoaded', () => {
    const elements = {
        imageUpload: document.getElementById('imageUpload'),
        uploadArea: document.getElementById('uploadArea'),
        addedImagesContainer: document.getElementById('addedImagesContainer'),
        existingImagesInput: document.getElementById('existingImagesInput'),
        mainImageInput: document.getElementById('mainImageInput'),
        cropperImage: document.getElementById('cropperImage'),
        saveCroppedBtn: document.getElementById('saveCroppedImage'),
        errorElement: document.getElementById('images-error'),
        productForm: document.getElementById('productForm')
    };

    let cropper;
    let currentFile;
    const uploadedImages = [];
    // Initialize existingImages from the hidden input - FIX: Get existing images from DOM
    let existingImages = [];
    
    // Get existing images from the thumbnails that are already displayed
    document.querySelectorAll('.thumbnail[data-type="existing"]').forEach(thumb => {
        const imageName = thumb.dataset.name;
        if (imageName) {
            existingImages.push(imageName);
        }
    });
    
    // Update the hidden input with the current existing images
    updateHiddenFields();

    // Initialize event listeners
    elements.imageUpload.addEventListener('change', handleImageSelection);
    elements.saveCroppedBtn.addEventListener('click', saveCroppedImage);
    elements.uploadArea.addEventListener('click', () => elements.imageUpload.click());
    document.getElementById('cropperModal').addEventListener('shown.bs.modal', initCropper);
    document.getElementById('cropperModal').addEventListener('hidden.bs.modal', () => cropper?.destroy());
    document.querySelectorAll('.aspect-ratio-buttons button').forEach(btn =>
        btn.addEventListener('click', () => cropper?.setAspectRatio(btn.dataset.ratio === 'free' ? NaN : btn.dataset.ratio))
    );

    // Size variants
    document.addEventListener('change', (e) => {
        if (e.target.name.includes('[price]')) {
            const row = e.target.closest('tr');
            const price = parseFloat(e.target.value);
            const salePrice = parseFloat(row.querySelector('[name*="[sale_price]"]').value);
            if (salePrice && price <= salePrice) {
                alert('Regular price must be higher than sale price');
                e.target.value = '';
                e.target.focus();
            }
        }
    });

    // Initialize existing images
    document.querySelectorAll('.thumbnail[data-type="existing"]').forEach(thumb => {
        thumb.querySelector('.remove-btn').addEventListener('click', (e) => {
            e.stopPropagation();
            removeImage(thumb);
        });
        thumb.addEventListener('click', (e) => {
            if (!e.target.closest('.remove-btn')) setAsMainImage(thumb);
        });
    });

    // Drag and drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName =>
        elements.uploadArea.addEventListener(eventName, e => e.preventDefault())
    );
    ['dragenter', 'dragover'].forEach(eventName =>
        elements.uploadArea.addEventListener(eventName, () => elements.uploadArea.classList.add('dragover'))
    );
    ['dragleave', 'drop'].forEach(eventName =>
        elements.uploadArea.addEventListener(eventName, () => elements.uploadArea.classList.remove('dragover'))
    );
    elements.uploadArea.addEventListener('drop', (e) => {
        const files = e.dataTransfer.files;
        if (files.length) handleImageSelection({ target: { files } });
    });

    // Form submission - FIX: Ensure existing images are preserved
    elements.productForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        // Update hidden fields before submission
        updateHiddenFields();
        
        const formData = new FormData(elements.productForm);
        
        // Add new uploaded images
        uploadedImages.forEach(img => formData.append('images', img.file));
        
        // Debug: Log what we're sending
        console.log('Existing images being sent:', existingImages);
        console.log('New images being sent:', uploadedImages.length);

        fetch(elements.productForm.action, {
            method: 'POST',
            body: formData
        })
            .then(response => response.redirected ? window.location.href = response.url : response.json())
            .then(data => data?.error && showError(data.error))
            .catch(err => showError('Failed to save product'));
    });

    function handleImageSelection(e) {
        const files = e.target.files;
        if (!files?.length) return;

        const totalImages = existingImages.length + uploadedImages.length + files.length;
        if (totalImages > MAX_IMAGES) {
            showError(`Maximum ${MAX_IMAGES} images allowed (${totalImages - MAX_IMAGES} too many)`);
            return;
        }

        Array.from(files).forEach(file => {
            if (!ACCEPTED_TYPES.includes(file.type)) return showError('Only JPG, PNG, and WebP images are allowed');
            if (file.size > MAX_FILE_SIZE) return showError('Image size should be less than 5MB');
            currentFile = file;
            const reader = new FileReader();
            reader.onload = (e) => {
                elements.cropperImage.src = e.target.result;
                new bootstrap.Modal('#cropperModal').show();
            };
            reader.readAsDataURL(file);
        });
        e.target.value = '';
    }

    function initCropper() {
        if (cropper) cropper.destroy();
        cropper = new Cropper(elements.cropperImage, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 0.8,
            responsive: true,
            guides: false
        });
    }

    function saveCroppedImage() {
        if (!cropper) return;

        cropper.getCroppedCanvas({
            width: 800,
            height: 800,
            fillColor: '#fff',
            imageSmoothingQuality: 'high'
        }).toBlob(blob => {
            const fileName = currentFile.name.replace(/\.[^/.]+$/, '') + '_cropped.jpg';
            const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
            const imageObj = {
                type: 'new',
                file: croppedFile,
                url: URL.createObjectURL(blob),
                isMain: existingImages.length + uploadedImages.length === 0
            };
            
            uploadedImages.push(imageObj);
            createThumbnail(imageObj);

            // Get the existing modal instance and hide it
            const cropperModal = bootstrap.Modal.getInstance(document.getElementById('cropperModal'));
            if (cropperModal) {
                cropperModal.hide();
            }
        }, 'image/jpeg', 0.9);
    }

    function createThumbnail(image) {
        const thumb = document.createElement('div');
        thumb.className = `thumbnail ${image.isMain ? 'main-image' : ''}`;
        thumb.dataset.type = image.type;
        thumb.dataset.name = image.name || image.file.name;
        thumb.innerHTML = `
            <img src="${image.url}" alt="Product Image">
            <button class="remove-btn"><i class="fas fa-times"></i></button>
            ${image.isMain ? '<span class="main-image-badge">Main</span>' : ''}
        `;
        thumb.addEventListener('click', (e) => {
            if (!e.target.closest('.remove-btn')) setAsMainImage(thumb);
        });
        thumb.querySelector('.remove-btn').addEventListener('click', (e) => {
            e.stopPropagation();
            removeImage(thumb);
        });
        elements.addedImagesContainer.appendChild(thumb);
        updateHiddenFields();
    }

    function setAsMainImage(thumb) {
        document.querySelectorAll('.thumbnail').forEach(t => {
            t.classList.remove('main-image');
            const badge = t.querySelector('.main-image-badge');
            if (badge) badge.remove();
        });
        thumb.classList.add('main-image');
        thumb.innerHTML += '<span class="main-image-badge">Main</span>';
        elements.mainImageInput.value = thumb.dataset.name;
    }

    function removeImage(thumb) {
        const imageType = thumb.dataset.type;
        const imageName = thumb.dataset.name;
        
        if (imageType === 'existing') {
            // Remove from existing images array
            existingImages = existingImages.filter(img => img !== imageName);
        } else {
            // Remove from uploaded images array
            const index = uploadedImages.findIndex(img => img.file.name === imageName);
            if (index !== -1) {
                URL.revokeObjectURL(uploadedImages[index].url);
                uploadedImages.splice(index, 1);
            }
        }
        
        // Handle main image reassignment
        if (thumb.classList.contains('main-image')) {
            const firstThumb = document.querySelector('.thumbnail');
            if (firstThumb && firstThumb !== thumb) {
                setAsMainImage(firstThumb);
            } else {
                elements.mainImageInput.value = '';
            }
        }
        
        thumb.remove();
        updateHiddenFields();
    }

    // FIX: Update hidden fields with current existing images
    function updateHiddenFields() {
        elements.existingImagesInput.value = existingImages.join(',');
        console.log('Updated existing images input:', elements.existingImagesInput.value);
    }

    function showError(message) {
        elements.errorElement.textContent = message;
        setTimeout(() => elements.errorElement.textContent = '', 5000);
    }
});
       
            async function removeVariantSize(variant, productId) {


                //Find and remove the table row
                            const rows = document.querySelectorAll('#sizeTableBody tr');
                          rows.forEach(row => {
    const button = row.querySelector('button[data-variant]');
    
    if (button && button.dataset.variant === variant) {
            row.remove(); 
            Swal.fire({
                toast:true,
            icon:'warning',
            text:'Save edit for your perment data'
        })
        
    }
});


                // console.log('removeVariantSize called with variant:', variant, 'productId:', productId);
                // try {
                //     const response = await fetch(`/admin/removeVariant?pId=${encodeURIComponent(productId)}&variant=${encodeURIComponent(variant)}`, {
                //         method: 'DELETE',
                //     });

                //     const data = await response.json();

                //     if (response.ok && data.success) {
                //         Swal.fire({
                //             icon: 'success',
                //             title: 'Variant Removed',
                //             text: data.message || 'The selected variant has been successfully deleted!',
                //             confirmButtonColor: '#3085d6',
                //             confirmButtonText: 'OK'
                //         }).then(() => {
                //             // Find and remove the table row
                //             const rows = document.querySelectorAll('#sizeTableBody tr');
                //             rows.forEach(row => {
                //                 const button = row.querySelector('button[data-variant]');
                //                 if (button && button.dataset.variant === variant) {
                //                     row.remove();
                //                 }
                //             });
                //         });
                //     } else {
                //         throw new Error(data.message || 'Failed to delete variant');
                //     }
                // } catch (error) {
                //     console.error('Error in removeVariantSize:', error);
                //     Swal.fire({
                //         icon: 'error',
                //         title: 'Failed!',
                //         text: error.message || 'Oops! Something went wrong while deleting the variant.',
                //         confirmButtonColor: '#d33',
                //         confirmButtonText: 'Try Again'
                //     });
                // }
            }

            function addNewVariant() {
                try {
                    const size = document.getElementById('newSizeSelect').value;
                    const regularPrice = document.getElementById('newRegularPrice').value;
                    const salePrice = document.getElementById('newSalePrice').value;
                    const quantity = document.getElementById('newStockQuantity').value;

                    // Validate inputs
                    if (!size || !regularPrice || !quantity) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Missing Information',
                            text: 'Please fill in all required fields (Size, Regular Price, and Stock)',
                            confirmButtonColor: '#d33'
                        });
                        return;
                    }

                    if (salePrice && parseFloat(salePrice) >= parseFloat(regularPrice)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Prices',
                            text: 'Sale price must be less than regular price',
                            confirmButtonColor: '#d33'
                        });
                        return;
                    }

                    // Check if this size already exists
                    const existingRows = document.querySelectorAll('#sizeTableBody tr');
                    for (let row of existingRows) {
                        const sizeInput = row.querySelector('select[name*="[size]"]');
                        if (sizeInput && sizeInput.value === size) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Duplicate Size',
                                text: 'This size already exists in the product variants',
                                confirmButtonColor: '#d33'
                            });
                            return;
                        }
                    }

                    // Create new row
                    const tableBody = document.getElementById('sizeTableBody');
                    const newRow = document.createElement('tr');
                    const variantIndex = existingRows.length;

                    newRow.innerHTML = `
                        <td>
                            <select name="variants[${variantIndex}][size]" class="form-control">
                                <option value="S" ${size === 'S' ? 'selected' : ''}>S</option>
                                <option value="M" ${size === 'M' ? 'selected' : ''}>M</option>
                                <option value="L" ${size === 'L' ? 'selected' : ''}>L</option>
                                <option value="XL" ${size === 'XL' ? 'selected' : ''}>XL</option>
                                <option value="XXL" ${size === 'XXL' ? 'selected' : ''}>XXL</option>
                            </select>
                        </td>
                        <td><input type="number" class="form-control" name="variants[${variantIndex}][regularPrice]" value="${regularPrice}"></td>
                        <td><input type="number" class="form-control" name="variants[${variantIndex}][salePrice]" value="${salePrice}"></td>
                        <td><input type="number" class="form-control" name="variants[${variantIndex}][quantity]" value="${quantity}"></td>
                        <td>
                            <button class="btn btn-sm btn-outline-secondary remove-variant-btn" 
                                onclick="event.preventDefault(); removeVariantSize('${size}', '<%= product._id %>')"
                                data-variant="${size}"
                                data-productid="<%= product._id %>">
                                Remove Variant
                            </button>
                        </td>
                    `;

                    tableBody.appendChild(newRow);

                    // Close modal and reset form
                    bootstrap.Modal.getInstance(document.getElementById('sizeModal')).hide();
                    document.getElementById('newRegularPrice').value = '';
                    document.getElementById('newSalePrice').value = '';
                    document.getElementById('newStockQuantity').value = '';

                    Swal.fire({
                        icon: 'success',
                        title: 'Variant Added',
                        text: 'The new size variant has been added successfully',
                        confirmButtonColor: '#3085d6'
                    });

                } catch (error) {
                    console.error('Error in addNewVariant:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while adding the variant',
                        confirmButtonColor: '#d33'
                    });
                }
            }
        </script>
</body>

</html>
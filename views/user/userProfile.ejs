<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile | <%= user.username %>
    </title>

    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script> -->




    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">

    <style>
        :root {
            --primary-color: #2e7d32;
            --primary-light: #4caf50;
            --primary-dark: #1b5e20;
            --secondary-color: #ffffff;
            --accent-color: #81c784;
            --text-color: #333333;
            --light-gray: #f5f5f5;
            --success-color: #388e3c;
            --warning-color: #f57c00;
            --danger-color: #d32f2f;
            --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            --border-radius: 12px;
        }

        body {
            background-color: var(--secondary-color);
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            color: var(--text-color);
            line-height: 1.6;
        }

        .modal-content {
            box-shadow: 0 0 15px rgba(40, 167, 69, 0.2);
        }





        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
            margin: 20px 0;
            font-family: sans-serif;
        }

        .page-btn {
            width: 40px;
            height: 40px;
            border: none;
            border-radius: 6px;
            background-color: white;
            color: #2e7d32;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .page-btn:hover {
            background-color: #e8f5e9;
        }

        .page-btn.active {
            background-color: #2e7d32;
            color: white;
        }

        .page-info {
            font-weight: 600;
            color: #2e7d32;
        }


        /* ðŸ‘‡ Round crop frame overlay */
        .img-container .cropper-view-box,
        .img-container .cropper-face {
            border-radius: 50% !important;
        }

        /* Optional: add dark overlay for circular focus */
        .img-container .cropper-bg {
            background-color: rgba(0, 0, 0, 0.5);
        }



        /* Override Bootstrap's modal-lg to make it medium size */
        #cropImageModal .modal-dialog.modal-lg {
            max-width: 600px;
            /* medium width, adjust as needed */
            width: 100%;
        }

        /* Optional: Adjust image container height */
        #cropImageModal .img-container {
            min-height: 300px;
            max-height: 400px;
        }

        /* Optional: If you want smoother overflow */
        #cropImageModal .img-container img {
            object-fit: contain;
        }

        .border-success:focus {
            border-color: #28a745;
            box-shadow: 0 0 0 0.25rem rgba(40, 167, 69, 0.25);
        }

        .is-valid {
            border-color: #28a745 !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .is-invalid {
            border-color: #dc3545 !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .invalid-feedback {
            display: none;
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
        }

        .profile-header {
            background: linear-gradient(135deg, var(--secondary-color) 60%, var(--light-gray));
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            padding: 2.5rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(46, 125, 50, 0.1);
        }

        .profile-img {
            width: 160px;
            height: 160px;
            object-fit: cover;
            border: 6px solid var(--secondary-color);
            border-radius: 50%;
            box-shadow: 0 4px 8px rgba(46, 125, 50, 0.2);
            transition: transform 0.3s ease;
        }

        .profile-nav .nav-link {
            color: var(--text-color);
            font-weight: 600;
            padding: 0.75rem 1.75rem;
            border-radius: 8px;
            margin-right: 0.75rem;
            transition: all 0.3s ease;
            background: var(--secondary-color);
            border: 1px solid rgba(46, 125, 50, 0.2);
        }

        .profile-nav .nav-link.active,
        .profile-nav .nav-link:hover {
            background-color: var(--primary-color);
            color: var(--secondary-color);
            border-color: var(--primary-color);
        }

        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            margin-bottom: 2rem;
            background: var(--secondary-color);
            border: 1px solid rgba(46, 125, 50, 0.1);
        }

        .card-header {
            background: var(--primary-color);
            color: var(--secondary-color);
            border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }

        .btn-outline-primary {
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            color: var(--secondary-color);
        }

        .order-item {
            border-left: 4px solid var(--primary-color);
            background: rgba(76, 175, 80, 0.05);
            border-radius: 8px;
        }

        .badge-success {
            background-color: rgba(56, 142, 60, 0.1);
            color: var(--success-color);
        }

        .badge-delivered {
            background-color: rgba(56, 142, 60, 0.1);
            color: var(--success-color);
        }

        .badge-shipped {
            background-color: rgba(245, 124, 0, 0.1);
            color: var(--warning-color);
        }

        .verified-badge {
            color: var(--success-color);
        }

        .address-card.default {
            border: 2px solid var(--primary-color);
            background: rgba(76, 175, 80, 0.03);
        }

        .empty-state {
            background: var(--secondary-color);
            border: 1px dashed rgba(46, 125, 50, 0.3);
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(76, 175, 80, 0.25);
        }

        .modal-header {
            background-color: var(--primary-color);
            color: var(--secondary-color);
        }

        .progress-bar {
            background-color: var(--primary-color);
        }

        .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .page-link {
            color: var(--primary-color);
        }

        .alert-info {
            background-color: rgba(129, 199, 132, 0.2);
            border-color: rgba(129, 199, 132, 0.3);
            color: var(--text-color);
        }

        .table-hover tbody tr:hover {
            background-color: rgba(129, 199, 132, 0.1);
        }

        .dropdown-item:active {
            background-color: var(--primary-color);
        }

        .nav-tabs .nav-link.active {
            color: var(--primary-color);
            border-bottom: 2px solid var(--primary-color);
        }

        .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .pulse-animation {
            animation: pulse 0.5s ease-in-out;
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.1);
            }

            100% {
                transform: scale(1);
            }
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
    <%- include('../../views/partials/user/header',{title:'Home-page'}) %>
        <div class="container py-5">
            <div class="profile-header">
                <div class="row align-items-center">
                    <div class="col-md-2 text-center">
                        <img src="<%= user.userProfileImage || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.username) + '&background=2e7d32&color=fff&size=160' %>"
                            alt="Profile Image" class="profile-img mb-3" id="profileImagePreview">

                    </div>
                    <div class="col-md-6">
                        <h2 class="mb-2 fw-bold">
                            <%= user.username %>
                                <i class="fas fa-check-circle verified-badge" title="Verified Account"></i>
                        </h2>
                        <p class="text-muted mb-1"><i class="fas fa-envelope me-2"></i>
                            <%= user.email %>
                        </p>
                        <% if(user.phone) { %>
                            <p class="text-muted mb-1"><i class="fas fa-phone me-2"></i>
                                <%= user.phone %>
                            </p>
                            <% } %>

                    </div>
                    <div class="col-md-4 text-md-end mt-3 mt-md-0">
                        <button class="btn btn-primary me-2 mb-2" data-bs-toggle="modal"
                            data-bs-target="#editProfileModal">
                            <i class="fas fa-edit me-1"></i> Edit Profile
                        </button>
                    </div>
                </div>
            </div>

            <ul class="nav profile-nav mb-4 flex-nowrap overflow-auto pb-2" style="scrollbar-width: none;">
                <li class="nav-item"><a class="nav-link active" href="#profile" data-bs-toggle="tab"><i
                            class="fas fa-user me-1"></i> Profile</a></li>
                <li class="nav-item"><a class="nav-link" href="#address" data-bs-toggle="tab"><i
                            class="fas fa-home me-1"></i> Addresses</a></li>
                <li class="nav-item"><a class="nav-link" href="#orders" data-bs-toggle="tab"><i
                            class="fas fa-shopping-bag me-1"></i> Orders</a></li>
                <li class="nav-item"><a class="nav-link" href="#security" data-bs-toggle="tab"><i
                            class="fas fa-shield-alt me-1"></i> Security</a></li>
            </ul>

            <div class="tab-content">
                <div class="tab-pane fade show active" id="profile">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="card mb-4">
                                <div class="card-header"><i class="fas fa-info-circle me-2"></i> Personal Information
                                </div>
                                <div class="card-body">
                                    <div class="row mb-3">
                                        <div class="col-sm-4 fw-bold">Username:</div>
                                        <div class="col-sm-8">
                                            <%= user.username %>
                                        </div>
                                    </div>
                                    <div class="row mb-3">
                                        <div class="col-sm-4 fw-bold">Email:</div>
                                        <div class="col-sm-8">
                                            <%= user.email %>
                                                <span class="badge bg-success ms-2"><i
                                                        class="fas fa-check-circle me-1"></i>Verified</span>
                                        </div>
                                    </div>
                                    <% if(user.phone) { %>
                                        <div class="row mb-3">
                                            <div class="col-sm-4 fw-bold">Phone:</div>
                                            <div class="col-sm-8">
                                                <%= user.phone %>
                                            </div>
                                        </div>
                                        <% } else { %>
                                            <div class="row mb-3">
                                                <div class="col-sm-4 fw-bold">Phone:</div>
                                                <div class="col-sm-8 text-muted">Not provided</div>
                                            </div>
                                            <% } %>
                                </div>
                            </div>
                        </div>



                        <div class="col-lg-6">
                            <div class="card mb-4">
                                <div class="card-header"><i class="fas fa-chart-line me-2"></i> Account Statistics</div>
                                <div class="card-body">
                                    <div class="row mb-3">
                                        <div class="col-6">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-primary bg-opacity-10 p-3 rounded me-3"><i
                                                        class="fas fa-shopping-bag text-primary"></i></div>
                                                <div>
                                                    <h6 class="mb-0">Total Orders</h6>
                                                    <h4 class="mb-0">
                                                        <%= totalOrders %>
                                                    </h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-success bg-opacity-10 p-3 rounded me-3"><i
                                                        class="fas fa-check-circle text-success"></i></div>
                                                <div>
                                                    <h6 class="mb-0">Completed</h6>
                                                    <h4 class="mb-0">
                                                        <%= completedOrders %>
                                                    </h4>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-6">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-warning bg-opacity-10 p-3 rounded me-3"><i
                                                        class="fas fa-truck text-warning"></i></div>
                                                <div>
                                                    <h6 class="mb-0">In Progress</h6>
                                                    <h4 class="mb-0">
                                                        <%= inProgress %>
                                                    </h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-danger bg-opacity-10 p-3 rounded me-3"><i
                                                        class="fas fa-times-circle text-danger"></i></div>
                                                <div>
                                                    <h6 class="mb-0">Cancelled</h6>
                                                    <h4 class="mb-0">
                                                        <%= cancelledOrders %>
                                                    </h4>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <style>
                        .wallet-card {
                            background: #f5f6f7;
                            border-radius: 8px;
                            padding: 24px;
                            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
                            border: #000;

                            width: 546px;
                            height: 180px;

                            display: flex;
                            flex-direction: column;
                            gap: 12px;
                            align-items: center;
                            justify-content: center;
                        }


                        .wallet-icon {
                            width: 40px;
                            height: 40px;
                            background: #f3f3ed;
                            border-radius: 50%;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            font-size: 20px;
                            color: #444;
                        }

                        .wallet-content {
                            flex: 1;
                        }

                        .wallet-title {
                            font-weight: 700;
                            margin: 0;
                            color: #222;
                        }

                        .wallet-text {
                            margin: 2px 0 8px;
                            color: #555;
                            font-size: 14px;
                        }

                        .wallet-link {
                            font-size: 14px;
                            color: #000;
                            font-weight: 500;
                            text-decoration: none;
                        }
                    </style>
                    <div class="wallet-card">
                        <a href="/wallet" class="wallet-link">
                            <div class="wallet-icon">
                                <i class="bi bi-wallet2"></i>
                            </div>
                            <div class="wallet-content">
                                <h6 class="wallet-title">Your Wallet</h6>
                                <p class="wallet-text">Add or check balance</p>
                                <a href="/wallet" class="wallet-link">View wallet &gt;</a>
                            </div>
                        </a>
                    </div>


                </div>



                <div class="tab-pane fade" id="address">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-home me-2"></i> Saved Addresses</span>
                            <button class="btn btn-sm btn-primary" data-bs-toggle="modal"
                                data-bs-target="#addAddressModal">
                                <i class="fas fa-plus me-1"></i> Add New Address
                            </button>
                        </div>
                        <div class="card-body" id="addressBodyId">
                            <% if (addressData && addressData.length> 0) { %>
                                <div class="row">
                                    <% addressData.forEach((address,index)=> { %>
                                        <div class="col-md-6 mb-4">
                                            <div id="address<%= index %>"
                                                class="card h-100 address-card <%= address.isDefault ? 'default' : '' %>">
                                                <div class="card-body">
                                                    <h5 class="card-title">
                                                        <%= address.addressType %> Address
                                                    </h5>
                                                    <p class="card-text mt-3">
                                                        <strong>
                                                            <%= address.name %>
                                                        </strong><br>
                                                        <%= address.street %><br>
                                                            <%= address.city %>, <%= address.state %> - <%=
                                                                        address.pincode %><br>
                                                                        <%= address.country %>
                                                    </p>
                                                    <p class="card-text"><strong>Phone:</strong>
                                                        <%= address.phone %>
                                                    </p>
                                                    <% if (address.altPhone) { %>
                                                        <p class="card-text"><strong>Alt Phone:</strong>
                                                            <%= address.altPhone %>
                                                        </p>
                                                        <% } %>
                                                </div>
                                                <div class="card-footer bg-transparent d-flex justify-content-between">
                                                    <button class="btn btn-sm btn-outline-primary"
                                                        data-bs-toggle="modal" data-bs-target="#editAddressModal"
                                                        onclick="loadAddressForEdit('<%= encodeURIComponent(JSON.stringify(address)) %>')">
                                                        <i class="fas fa-edit me-1"></i> Edit
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                        onclick="confirmDeleteAddress('<%= address._id %>','<%= index %>')">
                                                        <i class="fas fa-trash me-1"></i> Remove
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                </div>
                                <% } %>
                        </div>
                    </div>
                </div>

                <div class="tab-pane fade" id="orders">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-shopping-bag me-2"></i> Order History</span>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button"
                                    id="orderFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-filter me-1"></i> Filter
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="orderFilterDropdown">
                                    <li><a class="dropdown-item active" href="#" data-filter="all">All Orders</a></li>
                                    <li>
                                        <hr class="dropdown-divider">
                                    </li>

                                    <li><a class="dropdown-item" href="#" data-filter='Pending'>Pending</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter='Delivered'>Delivered</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="Shipped">Shipped</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="Processing">Processing</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="cancelled">Cancelled</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="Failed">Failed</a></li>
                                    <li><a class="dropdown-item" href="#"
                                            data-filter="returnRequested">returnRequested</a></li>
                                    <li><a class="dropdown-item" href="#"
                                            data-filter="reutrnRejected">reutrnRejected</a></li>
                                </ul>
                            </div>
                        </div>

                        <div class="card-body">
                            <% if(order && order.length> 0) { %>
                                <% order.forEach((order,index)=> { %>
                                    <div class="order-item p-3 mb-3 border rounded"
                                        data-status="<%= order.status.toLowerCase() %>">
                                        <div class="d-flex justify-content-between flex-wrap mb-2">
                                            <h5>Order #<%= order.orderId %>
                                            </h5>
                                            <span id="orderStats<%= index %>"
                                                class="badge <%= getStatusBadgeClass(order.status) %> p-2">
                                                <%= order.status %>
                                            </span>
                                        </div>

                                        <p class="text-muted mb-1"><i class="fas fa-calendar-alt me-1"></i>Placed on
                                            <%= new Date(order.createdOn).toLocaleDateString() %>
                                        </p>

                                        <div class="d-flex justify-content-between flex-wrap align-items-center">
                                            <div>
                                                <p class="mb-2">
                                                    <%= order.orderedItems.length %> item<%= order.orderedItems.length
                                                            !==1 ? 's' : '' %>
                                                            â€¢ Total: â‚¹<%= order.finalAmount.toFixed(2) %>
                                                </p>
                                                <% if(order.returnReason) { %>
                                                    <p class="text-danger small mb-1"><i
                                                            class="fas fa-undo me-1"></i>Return Reason: <%=
                                                            order.returnReason %>
                                                    </p>
                                                    <% } %>
                                            </div>


                                            <div class="mt-2 mt-sm-0">
                                                <% if(order.status!=='Failed' ){%>
                                                    <a href="/orderDetailPage?orderId=<%= order.orderId %>">
                                                        <button class="btn btn-sm btn-outline-primary me-2">
                                                            <i class="fas fa-eye me-1"></i> Details
                                                        </button>
                                                    </a>
                                                    <% } %>
                                                        <% if(order.status !=='Delivered' && order.status !=='cancelled'
                                                            && order.status!=='returnRequested'
                                                            &&order.status!=='returned'
                                                            &&order.status!=='reutrnRejected' &&order.status!=='Failed'
                                                            ) { %>
                                                            <button class="btn btn-sm btn-outline-danger"
                                                                id="cancelBtn<%= index %>"
                                                                onclick="confirmCancelOrder('<%= order.orderId%>','<%= index %>')">
                                                                <i class="fas fa-times me-1"></i> Cancel
                                                            </button>
                                                            <% } else if(order.status==='Delivered' ) { %>
                                                                <button id="returnBtn<%= index %>"
                                                                    class="btn btn-sm btn-outline-secondary"
                                                                    onclick="returnOrder('<%= order.orderId %>', '<%= index %>')">
                                                                    <i class="fas fa-times me-1"></i> return
                                                                </button>
                                                                <% }else if(order.status==='Failed' ){%>
                                                                    <a href="/paymentFaildRetry?orderId=<%= order.orderId %>"
                                                                        class="btn btn-danger btn-sm">Retry Payment</a>
                                                                    <% } %>

                                            </div>
                                        </div>

                                    </div>
                                    <% }) %>

                                        <div class="pagination">
                                            <div class="pagination">
                                                <!-- Previous Button -->
                                                <% if(currentPage> 1) { %>
                                                    <button onclick="paginationForOrderSection(<%= currentPage - 1 %>)"
                                                        class="page-btn" aria-label="Previous Page">&lt;</button>
                                                    <% } %>

                                                        <!-- Current Page -->
                                                        <button class="page-btn active" aria-current="page">
                                                            <%= currentPage %>
                                                        </button>
                                                        <span class="page-info">of <%= totalPage %></span>

                                                        <!-- Next Button -->
                                                        <% if(currentPage < totalPage) { %>
                                                            <button
                                                                onclick="paginationForOrderSection(<%= currentPage + 1 %>)"
                                                                class="page-btn" aria-label="Next Page">&gt;</button>
                                                            <% } %>
                                            </div>



                                            <% } else { %>
                                                <div class="empty-state text-center py-5">
                                                    <i class="fas fa-shopping-bag fa-2x text-muted"></i>
                                                    <h4 class="mt-3">No Orders Yet</h4>
                                                    <p class="mb-4">You haven't placed any orders with us yet. Start
                                                        shopping to see your order history here!</p>
                                                    <a href="/shop" class="btn btn-primary"><i
                                                            class="fas fa-store me-1"></i> Start Shopping</a>
                                                </div>
                                                <% } %>
                                        </div>
                        </div>

                    </div>

                    <!-- PASSWORD AND SECURITY -->

                    <div class="tab-pane fade" id="security">

                        <!-- Flash Toast Message -->
                        <% if (flash) { %>
                            <script>
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: '<%= flash.type %>', // 'success', 'error', etc.
                                    title: '<%= flash.message %>',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true
                                });
                            </script>
                            <% } %>

                                <div class="row">
                                    <div class="col-lg-6">
                                        <div class="card mb-4">
                                            <div class="card-header">
                                                <i class="fas fa-lock me-2"></i> Password & Security
                                            </div>
                                            <div class="card-body">

                                                <!-- For Google Authenticated Users -->
                                                <% if (user.googleId) { %>
                                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                                        <div>
                                                            <h6 class="mb-0">
                                                                <%= user.email %>
                                                            </h6>
                                                        </div>
                                                        <button class="btn btn-sm btn-outline-primary" disabled>
                                                            <i class="fas fa-key me-1"></i> Change
                                                        </button>
                                                    </div>

                                                    <!-- For Regular Users -->
                                                    <% } else { %>
                                                        <!-- Security Tip -->
                                                        <div class="alert alert-info d-flex align-items-center mb-4">
                                                            <i class="fas fa-info-circle me-3"></i>
                                                            <div>
                                                                <strong>Security Tip:</strong> Use a strong, unique
                                                                password
                                                                and change it regularly to keep your account secure.
                                                            </div>
                                                        </div>

                                                        <!-- Password Section -->
                                                        <div
                                                            class="d-flex justify-content-between align-items-center mb-3">
                                                            <div>
                                                                <h6 class="mb-0">Password</h6>
                                                            </div>
                                                            <a href="/changePassword">
                                                                <button class="btn btn-sm btn-outline-primary">
                                                                    <i class="fas fa-key me-1"></i> Change
                                                                </button>
                                                            </a>
                                                        </div>

                                                        <!-- Email Section -->
                                                        <div
                                                            class="d-flex justify-content-between align-items-center mb-3">
                                                            <div>
                                                                <h6 class="mb-0">
                                                                    <%= user.email %>
                                                                </h6>
                                                            </div>
                                                            <a href="/passCheckforEmailchange">
                                                                <button class="btn btn-sm btn-outline-primary">
                                                                    <i class="fas fa-key me-1"></i> Change
                                                                </button>
                                                            </a>
                                                        </div>
                                                        <% } %>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                    </div>

                </div>
            </div>

            <!-- Edit Profile Modal -->
            <div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content border-0 shadow">
                        <div class="modal-header bg-success text-white">
                            <h5 class="modal-title">Edit Profile</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                                aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editProfileForm" novalidate>
                                <div class="text-center mb-4">
                                    <div class="position-relative d-inline-block">
                                        <img id="editProfileImagePreview"
                                            src="<%= user.userProfileImage || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.username) + '&background=2e7d32&color=fff&size=160' %>"
                                            class="rounded-circle border border-success border-3 object-fit-cover"
                                            style="width: 120px; height: 120px;">



                                        <button type="button"
                                            class="btn btn-success btn-sm position-absolute bottom-0 end-0 rounded-circle">
                                            <i class="fas fa-camera"></i>
                                            <input type="file" id="profilePhotoUpload" accept="image/*" class="d-none">
                                        </button>
                                    </div>
                                    <%if(user.userProfileImage){%>
                                        <a href="#" style="text-decoration: none;">
                                            <p class="danger" id="removeImageBtn" style="color: red; margin: 0;">remove
                                            </p>
                                        </a>

                                        <%}%>

                                </div>
                                <div class="mb-3">
                                    <label class="form-label text-success">Username</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-white text-success">@</span>
                                        <input type="text" class="form-control border-success" id="editUsername"
                                            value="<%= user.username %>" pattern="^[a-zA-Z0-9_]{3,20}$">
                                        <div class="invalid-feedback">Username must be 3-20 characters</div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label text-success">Phone</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-white text-success"></span>
                                        <input type="text" class="form-control border-success" id="editphone"
                                            value="<%= user.phone %>" pattern="^[6-9]\d{9}$">
                                        <div class="invalid-feedback">Username must be 3-20 characters</div>
                                    </div>
                                </div>
                                <div class="modal-footer bg-light">
                                    <button id="cancellProfileEditBtn" type="button" class="btn btn-outline-secondary"
                                        data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-success" id="saveProfileChanges">Save
                                        Changes</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ===== Crop Modal ===== -->
            <div class="modal fade" id="cropImageModal" tabindex="-1" aria-labelledby="cropImageModalLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content border-0 shadow-lg rounded-4 overflow-hidden">

                        <!-- Header -->
                        <div class="modal-header bg-success bg-gradient text-white py-3 px-4">
                            <h5 class="modal-title d-flex align-items-center gap-2" id="cropImageModalLabel">
                                <i class="fas fa-crop"></i> <span>Crop Profile Image</span>
                            </h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                                aria-label="Close"></button>
                        </div>

                        <!-- Body -->
                        <div class="modal-body bg-light p-0">
                            <div class="img-container position-relative d-flex justify-content-center align-items-center"
                                style="min-height: 200px; max-height: 30vh; background: linear-gradient(to bottom, #f9f9f9, #fff);">
                                <!-- Crop area -->
                                <div class="">
                                    <img id="imageToCrop" alt="To crop"
                                        style="position: absolute; top: 0; left: 0; width: 100%; height: auto;">
                                </div>
                            </div>

                            <!-- Controls -->
                            <div
                                class="p-3 bg-white border-top d-flex justify-content-between align-items-center flex-wrap gap-3">
                                <div class="btn-group flex-wrap">
                                    <button class="btn btn-outline-success btn-sm d-flex align-items-center gap-1"
                                        id="zoomInBtn">
                                        <i class="fas fa-search-plus"></i> <span>Zoom In</span>
                                    </button>
                                    <button class="btn btn-outline-success btn-sm d-flex align-items-center gap-1"
                                        id="zoomOutBtn">
                                        <i class="fas fa-search-minus"></i> <span>Zoom Out</span>
                                    </button>
                                    <button class="btn btn-outline-success btn-sm d-flex align-items-center gap-1"
                                        id="rotateLeftBtn">
                                        <i class="fas fa-undo"></i> <span>Rotate Left</span>
                                    </button>
                                    <button class="btn btn-outline-success btn-sm d-flex align-items-center gap-1"
                                        id="rotateRightBtn">
                                        <i class="fas fa-redo"></i> <span>Rotate Right</span>
                                    </button>
                                </div>
                                <span class="badge bg-success fs-6 px-3 py-2 shadow rounded-pill"
                                    id="cropDimensions">--</span>
                            </div>
                        </div>

                        <!-- Footer -->
                        <div class="modal-footer bg-light py-3 px-4 d-flex justify-content-end gap-2">
                            <button class="btn btn-outline-secondary d-flex align-items-center gap-1"
                                data-bs-dismiss="modal">
                                <i class="fas fa-times"></i> <span>Cancel</span>
                            </button>
                            <button class="btn btn-success d-flex align-items-center gap-1" id="cropImageBtn">
                                <i class="fas fa-check"></i> <span>Crop & Save</span>
                            </button>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Add Address Modal -->
            <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel"
                aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content border-0 shadow">
                        <div class="modal-header bg-success text-white">
                            <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                                aria-label="Close"></button>
                        </div>
                        <div class="modal-body bg-light">
                            <form id="addAddressForm" novalidate>
                                <div class="mb-3">
                                    <label for="name" class="form-label">Full Name</label>
                                    <input type="text" class="form-control" id="name" pattern="^[a-zA-Z\s]{3,50}$"
                                        required>
                                    <div class="invalid-feedback" id="nameError">Please enter a valid name (3-50
                                        letters, no
                                        special characters)</div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="phone" class="form-label">Phone Number</label>
                                        <input type="tel" class="form-control" id="phone" pattern="^[\d\s+()-]{7,20}$"
                                            required>
                                        <div class="invalid-feedback" id="phoneError">Please enter a valid phone number
                                            (7-20 digits)</div>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="altPhone" class="form-label">Alternate Phone (Optional)</label>
                                        <input type="tel" class="form-control" id="altPhone"
                                            pattern="^[\d\s+()-]{7,20}$|^$">
                                        <div class="invalid-feedback" id="altPhoneError">Please enter a valid phone
                                            number
                                            (7-20 digits)</div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="addressType" class="form-label">Address Type</label>
                                    <select class="form-select" id="addressType" required>
                                        <option value="" selected disabled>Select address type</option>
                                        <option value="Home">Home</option>
                                        <option value="Office">Office</option>
                                        <option value="Other">Other</option>
                                    </select>
                                    <div class="invalid-feedback" id="addressTypeError">Please select an address type
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="country" class="form-label">Country</label>
                                    <select class="form-select" id="country" required>
                                        <option value="" selected disabled>Select country</option>
                                        <option value="IN">India</option>
                                        <option value="CA">Canada</option>
                                        <option value="GB">United Kingdom</option>
                                        <option value="AU">Australia</option>
                                        <option value="other">Other</option>
                                    </select>
                                    <div class="invalid-feedback" id="countryError">Please select a country</div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="state" class="form-label">State</label>
                                        <input type="text" class="form-control" id="state" pattern="^[a-zA-Z\s-]{2,50}$"
                                            required>
                                        <div class="invalid-feedback" id="stateError">Please enter a valid state name
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="city" class="form-label">City</label>
                                        <input type="text" class="form-control" id="city" pattern="^[a-zA-Z\s-]{2,50}$"
                                            required>
                                        <div class="invalid-feedback" id="cityError">Please enter a valid city name
                                        </div>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-8">
                                        <label for="street" class="form-label">Street Address</label>
                                        <input type="text" class="form-control" id="street"
                                            pattern="^[a-zA-Z0-9\s,.'-]{5,100}$" required>
                                        <div class="invalid-feedback" id="streetError">Please enter a valid street
                                            address
                                            (5-100 characters)</div>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="pincode" class="form-label">Postal/ZIP Code</label>
                                        <input type="text" class="form-control" id="pincode"
                                            pattern="^[a-zA-Z0-9-]{3,10}$" required>
                                        <div class="invalid-feedback" id="pincodeError">Please enter a valid postal/ZIP
                                            code
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer bg-white">
                            <button type="button" class="btn btn-outline-secondary"
                                data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" id="saveAddress">Save Address</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Address Modal -->
            <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel"
                aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content border-0 shadow">
                        <div class="modal-header bg-success text-white">
                            <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                                aria-label="Close"></button>
                        </div>
                        <div class="modal-body bg-light">
                            <form id="editAddressForm" novalidate>
                                <input type="hidden" id="editAddressId">
                                <div class="mb-3">
                                    <label for="editAddressType" class="form-label">Address Type</label>
                                    <select class="form-select" id="editAddressType" required>
                                        <option value="" selected disabled>Select address type</option>
                                        <option value="Home">Home</option>
                                        <option value="Office">Office</option>
                                        <option value="Other">Other</option>
                                    </select>
                                    <div class="invalid-feedback" id="editAddressTypeError">Please select an address
                                        type
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="editName" class="form-label">Full Name</label>
                                    <input type="text" class="form-control" id="editName" pattern="^[a-zA-Z\s]{3,50}$"
                                        required>
                                    <div class="invalid-feedback" id="editNameError">Please enter a valid name (3-50
                                        letters, no special characters)</div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="editPhone" class="form-label">Phone Number</label>
                                        <input type="tel" class="form-control" id="editPhone"
                                            pattern="^[\d\s+()-]{7,20}$" required>
                                        <div class="invalid-feedback" id="editPhoneError">Please enter a valid phone
                                            number
                                            (7-20 digits)</div>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="editAltPhone" class="form-label">Alternate Phone (Optional)</label>
                                        <input type="tel" class="form-control" id="editAltPhone"
                                            pattern="^[\d\s+()-]{7,20}$|^$">
                                        <div class="invalid-feedback" id="editAltPhoneError">Please enter a valid phone
                                            number (7-20 digits)</div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="editCountry" class="form-label">Country</label>
                                    <select class="form-select" id="editCountry" required>
                                        <option value="" selected disabled>Select country</option>
                                        <option value="IN">India</option>
                                        <option value="CA">Canada</option>
                                        <option value="GB">United Kingdom</option>
                                        <option value="AU">Australia</option>
                                        <option value="other">Other</option>
                                    </select>
                                    <div class="invalid-feedback" id="editCountryError">Please select a country</div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="editState" class="form-label">State</label>
                                        <input type="text" class="form-control" id="editState"
                                            pattern="^[a-zA-Z\s-]{2,50}$" required>
                                        <div class="invalid-feedback" id="editStateError">Please enter a valid state
                                            name
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="editCity" class="form-label">City</label>
                                        <input type="text" class="form-control" id="editCity"
                                            pattern="^[a-zA-Z\s-]{2,50}$" required>
                                        <div class="invalid-feedback" id="editCityError">Please enter a valid city name
                                        </div>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-8">
                                        <label for="editStreet" class="form-label">Street Address</label>
                                        <input type="text" class="form-control" id="editStreet"
                                            pattern="^[a-zA-Z0-9\s,.'-]{5,100}$" required>
                                        <div class="invalid-feedback" id="editStreetError">Please enter a valid street
                                            address (5-100 characters)</div>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="editPincode" class="form-label">Postal/ZIP Code</label>
                                        <input type="text" class="form-control" id="editPincode"
                                            pattern="^[a-zA-Z0-9-]{3,10}$" required>
                                        <div class="invalid-feedback" id="editPincodeError">Please enter a valid
                                            postal/ZIP
                                            code</div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer bg-white">
                            <button type="button" class="btn btn-outline-secondary"
                                data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" id="updateAddress">Save Changes</button>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Confirmation Modals -->
            <div class="modal fade" id="confirmDeleteAddressModal" tabindex="-1"
                aria-labelledby="confirmDeleteAddressModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header bg-danger text-white">
                            <h5 class="modal-title" id="confirmDeleteAddressModalLabel">Confirm Deletion</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                                aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this address? This action cannot be undone.</p>
                            <input type="hidden" id="addressToDeleteId">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger" id="confirmDeleteAddressBtn">Delete
                                Address</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="confirmCancelOrderModal" tabindex="-1"
                aria-labelledby="confirmCancelOrderModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header bg-warning text-dark">
                            <h5 class="modal-title" id="confirmCancelOrderModalLabel">Confirm Order Cancellation</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to cancel this order? Some items may not be eligible for
                                cancellation
                                if they've already been processed.</p>
                            <input type="hidden" id="orderToCancelId">
                            <div class="form-group mt-3">
                                <label for="cancelReason" class="form-label">Reason for cancellation (optional):</label>
                                <textarea class="form-control" id="cancelReason" rows="2"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Go Back</button>
                            <button type="button" class="btn btn-warning" id="confirmCancelOrderBtn">Cancel
                                Order</button>
                        </div>
                    </div>
                </div>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
            <script>

                // Valid Indian pincode ranges by state
                const validIndianPincodes = {
                    'Andhra Pradesh': { start: 500000, end: 535999 },
                    'Arunachal Pradesh': { start: 790000, end: 792999 },
                    'Assam': { start: 780000, end: 788999 },
                    'Bihar': { start: 800000, end: 855999 },
                    'Chhattisgarh': { start: 490000, end: 497999 },
                    'Delhi': { start: 110000, end: 110099 },
                    'Goa': { start: 403000, end: 403999 },
                    'Gujarat': { start: 360000, end: 396999 },
                    'Haryana': { start: 120000, end: 136999 },
                    'Himachal Pradesh': { start: 170000, end: 177999 },
                    'Jammu and Kashmir': { start: 180000, end: 194999 },
                    'Jharkhand': { start: 810000, end: 835999 },
                    'Karnataka': { start: 560000, end: 591999 },
                    'Kerala': { start: 670000, end: 695999 },
                    'Ladakh': { start: 194000, end: 194999 },
                    'Madhya Pradesh': { start: 450000, end: 488999 },
                    'Maharashtra': { start: 400000, end: 445999 },
                    'Manipur': { start: 795000, end: 795999 },
                    'Meghalaya': { start: 793000, end: 794999 },
                    'Mizoram': { start: 796000, end: 796999 },
                    'Nagaland': { start: 797000, end: 798999 },
                    'Odisha': { start: 750000, end: 770999 },
                    'Punjab': { start: 140000, end: 160999 },
                    'Rajasthan': { start: 300000, end: 345999 },
                    'Sikkim': { start: 737000, end: 737999 },
                    'Tamil Nadu': { start: 600000, end: 643999 },
                    'Telangana': { start: 500000, end: 509999 },
                    'Tripura': { start: 799000, end: 799999 },
                    'Uttar Pradesh': { start: 200000, end: 285999 },
                    'Uttarakhand': { start: 240000, end: 263999 },
                    'West Bengal': { start: 700000, end: 743999 },
                    'Puducherry': { start: 605000, end: 609999 },
                    'Chandigarh': { start: 160000, end: 160999 },
                    'Dadra and Nagar Haveli and Daman and Diu': { start: 396000, end: 396999 },
                    'Lakshadweep': { start: 682000, end: 682999 },
                    'Andaman and Nicobar Islands': { start: 744000, end: 744999 }
                };

                // Function to validate Indian pincode
                function validateIndianPincode(pincode, state) {
                    if (!/^\d{6}$/.test(pincode)) return false;

                    const pincodeNum = parseInt(pincode);

                    // Invalid pincode patterns
                    if (pincodeNum === 123456 || pincodeNum === 0 || pincodeNum === 999999) {
                        return false;
                    }

                    // Check against state-specific ranges
                    if (state && validIndianPincodes[state]) {
                        const range = validIndianPincodes[state];
                        return pincodeNum >= range.start && pincodeNum <= range.end;
                    }

                    // General validation for any valid Indian pincode range
                    const validRanges = [
                        { start: 110000, end: 110099 }, // Delhi
                        { start: 120000, end: 136999 }, // Haryana
                        { start: 140000, end: 160999 }, // Punjab & Chandigarh
                        { start: 170000, end: 177999 }, // Himachal Pradesh
                        { start: 180000, end: 194999 }, // J&K & Ladakh
                        { start: 200000, end: 285999 }, // UP & Uttarakhand
                        { start: 300000, end: 345999 }, // Rajasthan
                        { start: 360000, end: 396999 }, // Gujarat & Daman Diu
                        { start: 400000, end: 445999 }, // Maharashtra
                        { start: 450000, end: 497999 }, // MP & Chhattisgarh
                        { start: 500000, end: 535999 }, // Andhra Pradesh & Telangana
                        { start: 560000, end: 591999 }, // Karnataka
                        { start: 600000, end: 643999 }, // Tamil Nadu & Puducherry
                        { start: 670000, end: 695999 }, // Kerala & Lakshadweep
                        { start: 700000, end: 743999 }, // West Bengal & Andaman
                        { start: 744000, end: 744999 }, // Andaman and Nicobar
                        { start: 750000, end: 770999 }, // Odisha
                        { start: 780000, end: 799999 }, // Northeast states
                        { start: 800000, end: 855999 }  // Bihar & Jharkhand
                    ];

                    return validRanges.some(range => pincodeNum >= range.start && pincodeNum <= range.end);
                }

                // Country-specific validation patterns and data
                const countryData = {
                    'IN': {
                        name: 'India',
                        phonePattern: /^[6-9]\d{9}$/,
                        pincodePattern: /^\d{6}$/,
                        phoneFormat: '10-digit number starting with 6-9',
                        pincodeFormat: 'valid 6-digit Indian pincode',
                        states: [
                            'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',
                            'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand',
                            'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur',
                            'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab',
                            'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura',
                            'Uttar Pradesh', 'Uttarakhand', 'West Bengal', 'Delhi', 'Jammu and Kashmir',
                            'Ladakh', 'Puducherry', 'Chandigarh', 'Dadra and Nagar Haveli and Daman and Diu',
                            'Lakshadweep', 'Andaman and Nicobar Islands'
                        ]
                    },
                    'US': {
                        name: 'United States',
                        phonePattern: /^[2-9]\d{2}[2-9]\d{2}\d{4}$/,
                        pincodePattern: /^\d{5}(-\d{4})?$/,
                        phoneFormat: '10-digit US phone number',
                        pincodeFormat: '5-digit ZIP or 9-digit ZIP+4',
                        states: [
                            'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado',
                            'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho',
                            'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana',
                            'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota',
                            'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada',
                            'New Hampshire', 'New Jersey', 'New Mexico', 'New York',
                            'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon',
                            'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota',
                            'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington',
                            'West Virginia', 'Wisconsin', 'Wyoming', 'Washington D.C.'
                        ]
                    },
                    'GB': {
                        name: 'United Kingdom',
                        phonePattern: /^(\+44|0)?[1-9]\d{8,9}$/,
                        pincodePattern: /^[A-Z]{1,2}\d[A-Z\d]?\s?\d[A-Z]{2}$/i,
                        phoneFormat: 'UK phone number (11 digits)',
                        pincodeFormat: 'UK postcode format',
                        states: [
                            'England', 'Scotland', 'Wales', 'Northern Ireland'
                        ]
                    },
                    'CA': {
                        name: 'Canada',
                        phonePattern: /^[2-9]\d{2}[2-9]\d{2}\d{4}$/,
                        pincodePattern: /^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/i,
                        phoneFormat: '10-digit Canadian phone number',
                        pincodeFormat: 'Canadian postal code (A1A 1A1)',
                        states: [
                            'Alberta', 'British Columbia', 'Manitoba', 'New Brunswick',
                            'Newfoundland and Labrador', 'Northwest Territories', 'Nova Scotia',
                            'Nunavut', 'Ontario', 'Prince Edward Island', 'Quebec',
                            'Saskatchewan', 'Yukon'
                        ]
                    },
                    'AU': {
                        name: 'Australia',
                        phonePattern: /^(\+61|0)?[2-478]\d{8}$/,
                        pincodePattern: /^\d{4}$/,
                        phoneFormat: 'Australian phone number',
                        pincodeFormat: '4-digit postcode',
                        states: [
                            'Australian Capital Territory', 'New South Wales', 'Northern Territory',
                            'Queensland', 'South Australia', 'Tasmania', 'Victoria', 'Western Australia'
                        ]
                    }
                };

                // Helper function for status badge
                function getStatusBadgeClass(status) {
                    switch (status.toLowerCase()) {
                        case 'delivered': return 'badge-delivered';
                        case 'shipped': return 'badge-shipped';
                        case 'completed': return 'badge-completed';
                        case 'processing': return 'badge bg-info';
                        case 'cancelled': return 'badge bg-danger';
                        default: return 'badge bg-secondary';
                    }
                }

                // Enhanced validation patterns with country support
                const patterns = {
                    username: /^[a-zA-Z]{3,20}$/,
                    name: /^[a-zA-Z\s]{2,50}$/,
                    street: /^[a-zA-Z0-9\s,.'-]{5,100}$/,
                    city: /^[a-zA-Z\s-]{2,50}$/,
                    bio: /^.{0,200}$/
                };

                // Get country-specific validation data
                function getCountryValidation(countryCode) {
                    return countryData[countryCode] || countryData['IN']; // Default to India
                }

                // Enhanced error messages with country context
                function getErrorMessage(fieldId, countryCode = 'IN') {
                    const countryInfo = getCountryValidation(countryCode);

                    const messages = {
                        username: 'Username must be 3-20 letters only, no numbers or special characters',
                        phone: `Please enter a valid ${countryInfo.phoneFormat}`,
                        altPhone: `Please enter a valid ${countryInfo.phoneFormat}`,
                        name: 'Please enter a valid name (2-50 letters only)',
                        state: `Please select a valid state/province for ${countryInfo.name}`,
                        city: 'Please enter a valid city name (2-50 characters)',
                        street: 'Please enter a valid street address (5-100 characters)',
                        pincode: `Please enter a valid ${countryInfo.pincodeFormat}`,
                        bio: 'Bio cannot exceed 200 characters'
                    };
                    return messages[fieldId] || 'Invalid input';
                }

                // Enhanced field validation with country support
                function validateField(field) {
                    const fieldId = field.id.replace('edit', '').toLowerCase();
                    const errorElement = document.getElementById(`${field.id}Error`);
                    const value = field.value.trim();

                    // Get country code from country select field
                    const countrySelect = document.getElementById(field.id.includes('edit') ? 'editCountry' : 'country');
                    const countryCode = countrySelect ? countrySelect.value : 'IN';
                    const countryInfo = getCountryValidation(countryCode);

                    // Phone validation with country-specific patterns
                    if (fieldId === 'phone' || fieldId === 'editphone') {
                        if (!countryInfo.phonePattern.test(value)) {
                            showFieldError(field, errorElement, `Enter a valid ${countryInfo.phoneFormat}`);
                            return false;
                        }
                    }
                    // Alternative phone validation (optional field)
                    else if (fieldId === 'altphone' || fieldId === 'editaltphone') {
                        if (value && !countryInfo.phonePattern.test(value)) {
                            showFieldError(field, errorElement, `Enter a valid ${countryInfo.phoneFormat}`);
                            return false;
                        }
                    }
                    // Pincode validation with country-specific patterns
                    else if (fieldId === 'pincode' || fieldId === 'editpincode') {
                        if (countryCode === 'IN') {
                            // Get the state for better validation
                            const stateSelect = document.getElementById(field.id.includes('edit') ? 'editState' : 'state');
                            const selectedState = stateSelect ? stateSelect.value : '';

                            if (!countryInfo.pincodePattern.test(value)) {
                                showFieldError(field, errorElement, 'Enter a valid 6-digit pincode');
                                return false;
                            }

                            if (!validateIndianPincode(value, selectedState)) {
                                const errorMsg = selectedState
                                    ? `Enter a valid pincode for ${selectedState}`
                                    : 'Enter a valid Indian pincode (e.g., 110001, 400001, 700001)';
                                showFieldError(field, errorElement, errorMsg);
                                return false;
                            }
                        } else {
                            if (!countryInfo.pincodePattern.test(value)) {
                                showFieldError(field, errorElement, `Enter a valid ${countryInfo.pincodeFormat}`);
                                return false;
                            }
                        }
                    }
                    // State validation
                    else if (fieldId === 'state' || fieldId === 'editstate') {
                        if (!countryInfo.states.includes(value)) {
                            showFieldError(field, errorElement, `Please select a valid state for ${countryInfo.name}`);
                            return false;
                        }
                    }
                    // Username validation (letters only)
                    else if (fieldId === 'username' || fieldId === 'editusername') {
                        if (!patterns.username.test(value)) {
                            showFieldError(field, errorElement, 'Username must be 3-20 letters only');
                            return false;
                        }
                    }
                    // Name validation
                    else if (fieldId === 'name' || fieldId === 'editname') {
                        if (!patterns.name.test(value)) {
                            showFieldError(field, errorElement, 'Name must be 2-50 letters only');
                            return false;
                        }
                    }
                    // City validation
                    else if (fieldId === 'city' || fieldId === 'editcity') {
                        if (!patterns.city.test(value)) {
                            showFieldError(field, errorElement, 'City name must be 2-50 letters only');
                            return false;
                        }
                    }
                    // Street validation
                    else if (fieldId === 'street' || fieldId === 'editstreet') {
                        if (!patterns.street.test(value)) {
                            showFieldError(field, errorElement, 'Street address must be 5-100 characters');
                            return false;
                        }
                    }
                    // Required field validation
                    else if (field.required && !value) {
                        showFieldError(field, errorElement, 'This field is required');
                        return false;
                    }

                    // Field is valid
                    field.classList.remove('is-invalid');
                    field.classList.add('is-valid');
                    errorElement.style.display = 'none';
                    return true;
                }

                // Helper function to show field errors
                function showFieldError(field, errorElement, message) {
                    field.classList.add('is-invalid');
                    field.classList.remove('is-valid');
                    errorElement.style.display = 'block';
                    errorElement.textContent = message;
                }

                // Update state dropdown based on country selection
                function updateStateOptions(countrySelectId, stateSelectId) {
                    const countrySelect = document.getElementById(countrySelectId);
                    const stateSelect = document.getElementById(stateSelectId);

                    if (!countrySelect || !stateSelect) return;

                    const countryCode = countrySelect.value;
                    const countryInfo = getCountryValidation(countryCode);

                    // Clear existing options
                    stateSelect.innerHTML = '<option value="">Select State/Province</option>';

                    // Add new options
                    countryInfo.states.forEach(state => {
                        const option = document.createElement('option');
                        option.value = state;
                        option.textContent = state;
                        stateSelect.appendChild(option);
                    });

                    // Reset validation state
                    stateSelect.classList.remove('is-valid', 'is-invalid');
                    const errorElement = document.getElementById(`${stateSelectId}Error`);
                    if (errorElement) errorElement.style.display = 'none';
                }

                // Validate select field
                function validateSelect(select) {
                    const selectId = select.id;
                    const errorElement = document.getElementById(`${selectId}Error`);
                    if (select.required && !select.value) {
                        select.classList.add('is-invalid');
                        select.classList.remove('is-valid');
                        errorElement.style.display = 'block';
                        errorElement.textContent = 'Please select an option';
                        return false;
                    }
                    select.classList.remove('is-invalid');
                    select.classList.add('is-valid');
                    errorElement.style.display = 'none';
                    return true;
                }

                // Validate entire form
                function validateForm(form) {
                    let isValid = true;
                    const inputs = form.querySelectorAll('input[pattern], input[required]');
                    const selects = form.querySelectorAll('select[required]');
                    inputs.forEach(input => { isValid &= validateField(input); });
                    selects.forEach(select => { isValid &= validateSelect(select); });
                    return isValid;
                }

                // Show alert
                function showAlert(message, type) {
                    const existingAlert = document.querySelector('.custom-alert');
                    if (existingAlert) existingAlert.remove();
                    const alertDiv = document.createElement('div');
                    alertDiv.className = `custom-alert alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
                    alertDiv.style.zIndex = '2000';
                    alertDiv.style.minWidth = '300px';
                    alertDiv.role = 'alert';
                    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
                    document.body.appendChild(alertDiv);
                    setTimeout(() => {
                        const bsAlert = new bootstrap.Alert(alertDiv);
                        bsAlert.close();
                    }, 5000);
                }

                // PROFILE HANDLER
                document.addEventListener('DOMContentLoaded', function () {
                    let profileDeleteReq = false;
                    let cropper;
                    const fileInput = document.getElementById('profilePhotoUpload');
                    const previewImage = document.getElementById('editProfileImagePreview');
                    const cropImage = document.getElementById('imageToCrop');

                    // Initialize modals if they exist
                    let cropModal, editModal;
                    if (document.getElementById('cropImageModal')) {
                        cropModal = new bootstrap.Modal(document.getElementById('cropImageModal'));
                    }
                    if (document.getElementById('editProfileModal')) {
                        editModal = new bootstrap.Modal(document.getElementById('editProfileModal'));
                    }

                    // Set up country change listeners
                    const countrySelect = document.getElementById('country');
                    const editCountrySelect = document.getElementById('editCountry');

                    if (countrySelect) {
                        countrySelect.addEventListener('change', () => {
                            updateStateOptions('country', 'state');
                        });
                        // Initialize state options on page load
                        updateStateOptions('country', 'state');
                    }

                    if (editCountrySelect) {
                        editCountrySelect.addEventListener('change', () => {
                            updateStateOptions('editCountry', 'editState');
                        });
                        // Initialize state options on page load
                        updateStateOptions('editCountry', 'editState');
                    }

                    // Open file input on camera button click
                    const cameraBtn = document.querySelector('.btn-success.btn-sm');
                    if (cameraBtn && fileInput) {
                        cameraBtn.addEventListener('click', () => fileInput.click());
                    }

                    // Image cropper logic
                    if (fileInput) {
                        fileInput.addEventListener('change', e => {
                            const file = e.target.files[0];
                            if (!file || !file.type.startsWith('image/')) {
                                showAlert('Please select a valid image file', 'danger');
                                return;
                            }

                            const reader = new FileReader();
                            reader.onload = e => {
                                if (cropImage) {
                                    cropImage.src = e.target.result;
                                    if (cropper) cropper.destroy();
                                    cropper = new Cropper(cropImage, {
                                        aspectRatio: 1,
                                        viewMode: 1,
                                        autoCropArea: 0.9,
                                        responsive: true,
                                        ready: updateCropDimensions,
                                        crop: updateCropDimensions
                                    });
                                    if (editModal) editModal.hide();
                                    if (cropModal) cropModal.show();
                                }
                            };
                            reader.readAsDataURL(file);
                        });
                    }

                    // Crop controls
                    const zoomInBtn = document.getElementById('zoomInBtn');
                    const zoomOutBtn = document.getElementById('zoomOutBtn');
                    const rotateLeftBtn = document.getElementById('rotateLeftBtn');
                    const rotateRightBtn = document.getElementById('rotateRightBtn');

                    if (zoomInBtn) zoomInBtn.onclick = () => cropper?.zoom(0.1);
                    if (zoomOutBtn) zoomOutBtn.onclick = () => cropper?.zoom(-0.1);
                    if (rotateLeftBtn) rotateLeftBtn.onclick = () => cropper?.rotate(-15);
                    if (rotateRightBtn) rotateRightBtn.onclick = () => cropper?.rotate(15);

                    function updateCropDimensions() {
                        const data = cropper?.getData();
                        const dimensionsEl = document.getElementById('cropDimensions');
                        if (data && dimensionsEl) {
                            dimensionsEl.textContent = `${Math.round(data.width)}Ã—${Math.round(data.height)}`;
                        }
                    }

                    const cropImageBtn = document.getElementById('cropImageBtn');
                    if (cropImageBtn) {
                        cropImageBtn.onclick = () => {
                            const canvas = cropper.getCroppedCanvas({ width: 300, height: 300 });
                            canvas.toBlob(blob => {
                                if (previewImage) previewImage.src = URL.createObjectURL(blob);
                                if (cropModal) cropModal.hide();
                                if (editModal) editModal.show();
                            }, 'image/jpeg');
                        };
                    }

                    // Save profile with validation and fetch
                    const saveProfileBtn = document.getElementById('saveProfileChanges');
                    if (saveProfileBtn) {
                        saveProfileBtn.addEventListener('click', async function (e) {
                            e.preventDefault();
                            let isValid = true;

                            // Username validation
                            const usernameInput = document.getElementById('editUsername');
                            if (usernameInput) {
                                const username = usernameInput.value.trim();
                                if (!patterns.username.test(username)) {
                                    showFieldError(usernameInput, usernameInput.nextElementSibling,
                                        "Username must be 3-20 letters only, no numbers or spaces");
                                    isValid = false;
                                } else {
                                    usernameInput.classList.remove('is-invalid');
                                    usernameInput.classList.add('is-valid');
                                    usernameInput.nextElementSibling.style.display = 'none';
                                }
                            }

                            // Phone validation
                            const phoneInput = document.getElementById('editphone');
                            if (phoneInput) {
                                const phone = phoneInput.value.trim();
                                const countryCode = document.getElementById('editCountry')?.value || 'IN';
                                const countryInfo = getCountryValidation(countryCode);

                                if (!countryInfo.phonePattern.test(phone)) {
                                    showFieldError(phoneInput, phoneInput.nextElementSibling,
                                        `Enter a valid ${countryInfo.phoneFormat}`);
                                    isValid = false;
                                } else {
                                    phoneInput.classList.remove('is-invalid');
                                    phoneInput.classList.add('is-valid');
                                    phoneInput.nextElementSibling.style.display = 'none';
                                }
                            }

                            // If not valid, stop here
                            if (!isValid) return;

                            // If valid, continue with fetch
                            try {
                                const formData = new FormData();
                                const usernameInput = document.getElementById('editUsername');
                                const phoneInput = document.getElementById('editphone');

                                if (usernameInput) formData.append('username', usernameInput.value.trim());
                                if (phoneInput) formData.append('phone', phoneInput.value.trim());
                                if (fileInput?.files[0]) formData.append('profilePhoto', fileInput.files[0]);
                                if (profileDeleteReq) formData.append('profileDeleteReq', profileDeleteReq);

                                const res = await fetch('/editProfile', {
                                    method: 'PATCH',
                                    body: formData
                                });

                                profileDeleteReq = false;

                                if (res.ok) {
                                    sessionStorage.setItem('profileToast', 'success');
                                } else {
                                    sessionStorage.setItem('profileToast', 'error');
                                }

                                window.location.reload();

                            } catch (error) {
                                sessionStorage.setItem('profileToast', 'error');
                                window.location.reload();
                            }
                        });
                    }

                    // Toast notifications
                    const toast = sessionStorage.getItem('profileToast');
                    if (toast === 'success' && typeof Swal !== 'undefined') {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Profile saved successfully!',
                            showConfirmButton: false,
                            timer: 1500,
                            timerProgressBar: true
                        });
                    }
                    if (toast === 'error' && typeof Swal !== 'undefined') {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Something went wrong!',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                    }
                    sessionStorage.removeItem('profileToast');

                    // Remove image logic
                    const removeBtn = document.getElementById('removeImageBtn');
                    if (removeBtn && previewImage) {
                        removeBtn.addEventListener('click', async (e) => {
                            e.preventDefault();

                            const result = await Swal.fire({
                                toast: true,
                                icon: 'warning',
                                title: 'Are you sure?',
                                showCancelButton: true,
                                confirmButtonColor: '#d33',
                                cancelButtonColor: '#3085d6',
                                confirmButtonText: 'Yes!',
                                cancelButtonText: 'No',
                                position: 'top-end'
                            });

                            if (result.isConfirmed) {
                                profileDeleteReq = true;

                                // Replace with avatar URL
                                const userName = previewImage.dataset.username || 'User';
                                previewImage.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&background=2e7d32&color=fff&size=160`;

                                removeBtn.style.display = 'none';

                                if (typeof Swal !== 'undefined') {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: 'Profile photo removed!',
                                        showConfirmButton: false,
                                        timer: 1500,
                                        timerProgressBar: true
                                    });
                                }
                            }
                        });
                    }

                    // Cancel button reloads page
                    const cancelBtn = document.getElementById('cancellProfileEditBtn');
                    if (cancelBtn) {
                        cancelBtn.addEventListener('click', () => {
                            window.location.reload();
                        });
                    }

                    // Add address form validation
                    const addAddressForm = document.getElementById('addAddressForm');
                    const saveAddressBtn = document.getElementById('saveAddress');

                    if (addAddressForm) {
                        const addAddressInputs = addAddressForm.querySelectorAll('input[pattern], input[required]');
                        const addAddressSelects = addAddressForm.querySelectorAll('select[required]');

                        addAddressInputs.forEach(input => {
                            input.addEventListener('input', () => validateField(input));
                            input.addEventListener('blur', () => validateField(input));
                        });

                        addAddressSelects.forEach(select => {
                            select.addEventListener('change', () => validateSelect(select));
                        });
                    }

                    if (saveAddressBtn) {
                        saveAddressBtn.addEventListener('click', async function () {
                            if (!validateForm(addAddressForm)) {
                                const firstError = addAddressForm.querySelector('.is-invalid');
                                if (firstError) firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                return;
                            }

                            const formData = {
                                name: document.getElementById('name').value.trim(),
                                phone: document.getElementById('phone').value.trim(),
                                altPhone: document.getElementById('altPhone').value.trim() || undefined,
                                addressType: document.getElementById('addressType').value,
                                country: document.getElementById('country').value,
                                state: document.getElementById('state').value.trim(),
                                city: document.getElementById('city').value.trim(),
                                street: document.getElementById('street').value.trim(),
                                pincode: document.getElementById('pincode').value.trim()
                            };

                            try {
                                const response = await fetch('/addAddress', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(formData)
                                });
                                const result = await response.json();

                                if (response.ok) {
                                    if (typeof Swal !== 'undefined') {
                                        await Swal.fire({
                                            toast: true,
                                            position: 'top-end',
                                            icon: 'success',
                                            title: 'Address added!',
                                            text: result.message || 'Your new address has been saved.',
                                            showConfirmButton: false,
                                            timer: 1000
                                        });
                                    }
                                    setTimeout(() => {
                                        window.location.reload();
                                    }, 1000);
                                } else {
                                    throw new Error(result.message || 'Failed to add address');
                                }
                            } catch (error) {
                                if (typeof Swal !== 'undefined') {
                                    await Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: 'Error!',
                                        text: error.message || 'Something went wrong while saving the address.',
                                        showConfirmButton: false,
                                        timer: 1000
                                    });
                                }
                                console.error('Error:', error);
                            }
                        });
                    }

                    // Reset add address form modal
                    const addAddressModal = document.getElementById('addAddressModal');
                    if (addAddressModal) {
                        addAddressModal.addEventListener('hidden.bs.modal', function () {
                            addAddressForm.reset();
                            addAddressForm.querySelectorAll('.is-invalid, .is-valid').forEach(el => {
                                el.classList.remove('is-invalid', 'is-valid');
                                const errorElement = document.getElementById(`${el.id}Error`);
                                if (errorElement) errorElement.style.display = 'none';
                            });
                        });
                    }

                    // Edit address form handling
                    const editAddressForm = document.getElementById('editAddressForm');
                    const updateAddressBtn = document.getElementById('updateAddress');

                    if (editAddressForm) {
                        const editAddressInputs = editAddressForm.querySelectorAll('input[pattern], input[required]');
                        const editAddressSelects = editAddressForm.querySelectorAll('select[required]');

                        editAddressInputs.forEach(input => {
                            input.addEventListener('input', () => validateField(input));
                            input.addEventListener('blur', () => validateField(input));
                        });

                        editAddressSelects.forEach(select => {
                            select.addEventListener('change', () => validateSelect(select));
                        });
                    }

                    if (updateAddressBtn) {
                        updateAddressBtn.addEventListener('click', async function () {
                            if (!validateForm(editAddressForm)) {
                                const firstError = editAddressForm.querySelector('.is-invalid');
                                if (firstError) firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                return;
                            }

                            const formData = {
                                _id: document.getElementById('editAddressId').value,
                                addressType: document.getElementById('editAddressType').value,
                                name: document.getElementById('editName').value.trim(),
                                street: document.getElementById('editStreet').value.trim(),
                                city: document.getElementById('editCity').value.trim(),
                                state: document.getElementById('editState').value.trim(),
                                pincode: document.getElementById('editPincode').value.trim(),
                                country: document.getElementById('editCountry').value,
                                phone: document.getElementById('editPhone').value.trim(),
                                altPhone: document.getElementById('editAltPhone').value.trim() || undefined
                            };

                            try {
                                const response = await fetch(`/editAddress?addressId=${encodeURIComponent(formData._id)}`, {
                                    method: 'PATCH',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(formData)
                                });
                                const result = await response.json();

                                if (response.ok) {
                                    if (typeof Swal !== 'undefined') {
                                        await Swal.fire({
                                            icon: 'success',
                                            title: 'Address updated!',
                                            text: result.message || 'Your address has been updated successfully.',
                                            timer: 1500,
                                            showConfirmButton: false
                                        });
                                    }
                                    const editModal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
                                    if (editModal) editModal.hide();
                                    window.location.reload();
                                } else {
                                    if (typeof Swal !== 'undefined') {
                                        await Swal.fire('Error!', result.message || 'Failed to update address.', 'error');
                                    }
                                }
                            } catch (error) {
                                if (typeof Swal !== 'undefined') {
                                    await Swal.fire('Error!', 'Something went wrong while updating the address.', 'error');
                                }
                                console.error('Error:', error);
                            }
                        });
                    }

                    // Reset edit address form modal
                    const editAddressModal = document.getElementById('editAddressModal');
                    if (editAddressModal) {
                        editAddressModal.addEventListener('hidden.bs.modal', function () {
                            editAddressForm.reset();
                            editAddressForm.querySelectorAll('.is-invalid, .is-valid').forEach(el => {
                                el.classList.remove('is-invalid', 'is-valid');
                                const errorElement = document.getElementById(`${el.id}Error`);
                                if (errorElement) errorElement.style.display = 'none';
                            });
                        });
                    }

                    // Print order functionality
                    const printOrderBtn = document.getElementById('printOrderBtn');
                    if (printOrderBtn) {
                        printOrderBtn.addEventListener('click', function () {
                            window.print();
                        });
                    }
                });

                // Global functions for address management
                window.loadAddressForEdit = function (addressData) {
                    const address = JSON.parse(decodeURIComponent(addressData));
                    document.getElementById('editAddressId').value = address._id;
                    document.getElementById('editAddressType').value = address.addressType;
                    document.getElementById('editName').value = address.name;
                    document.getElementById('editStreet').value = address.street;
                    document.getElementById('editCity').value = address.city;
                    document.getElementById('editState').value = address.state;
                    document.getElementById('editPincode').value = address.pincode;
                    document.getElementById('editCountry').value = address.country;
                    document.getElementById('editPhone').value = address.phone;
                    document.getElementById('editAltPhone').value = address.altPhone || '';

                    // Update state options based on country
                    updateStateOptions('editCountry', 'editState');

                    // Validate all fields after loading
                    const editAddressForm = document.getElementById('editAddressForm');
                    if (editAddressForm) {
                        editAddressForm.querySelectorAll('input, select').forEach(el => {
                            if (el.tagName === 'SELECT') {
                                validateSelect(el);
                            } else {
                                validateField(el);
                            }
                        });
                    }
                };

                // Delete address functionality
                window.confirmDeleteAddress = async function (addressId, index) {
                    if (typeof Swal === 'undefined') {
                        if (!confirm('Are you sure you want to delete this address?')) return;
                    } else {
                        const { isConfirmed } = await Swal.fire({
                            title: "Are you sure?",
                            text: "This address will be permanently deleted!",
                            icon: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#d33",
                            cancelButtonColor: "#3085d6",
                            confirmButtonText: "Yes, delete it!",
                            cancelButtonText: "No, keep it"
                        });

                        if (!isConfirmed) return;
                    }

                    try {
                        const deleteResponse = await fetch(`/deleteAddress?addressId=${encodeURIComponent(addressId)}`, {
                            method: 'DELETE'
                        });
                        const deleteResult = await deleteResponse.json();

                        if (deleteResponse.ok && deleteResult.success) {
                            await reloadAddressSection();

                            if (typeof Swal !== 'undefined') {
                                await Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: deleteResult.message || 'Address deleted successfully!',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                            }
                        } else {
                            if (typeof Swal !== 'undefined') {
                                await Swal.fire('Error!', deleteResult.message || 'Failed to delete address.', 'error');
                            } else {
                                alert(deleteResult.message || 'Failed to delete address.');
                            }
                        }
                    } catch (error) {
                        if (typeof Swal !== 'undefined') {
                            await Swal.fire('Error!', 'Something went wrong while deleting the address.', 'error');
                        } else {
                            alert('Something went wrong while deleting the address.');
                        }
                        console.error('Error:', error);
                    }
                };

                // Helper function to reload address section
                async function reloadAddressSection() {
                    try {
                        const profileResponse = await fetch('/userProfile');
                        if (!profileResponse.ok) throw new Error('Failed to fetch updated profile');

                        const html = await profileResponse.text();
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');

                        // Extract the address tab content
                        const newAddressTab = doc.querySelector('#address');
                        const newAddressNavLink = doc.querySelector('.profile-nav a[href="#address"]');

                        if (newAddressTab && newAddressNavLink) {
                            // Replace the address tab content
                            const currentAddressTab = document.querySelector('#address');
                            if (currentAddressTab) {
                                currentAddressTab.innerHTML = newAddressTab.innerHTML;
                            }

                            // Replace the nav link (in case counts changed)
                            const currentNavLink = document.querySelector('.profile-nav a[href="#address"]');
                            if (currentNavLink) {
                                currentNavLink.innerHTML = newAddressNavLink.innerHTML;
                            }

                            // Reinitialize event listeners
                            initializeAddressEventListeners();
                        }
                    } catch (error) {
                        console.error('Error reloading address section:', error);
                    }
                }

                // Helper function to reinitialize event listeners
                function initializeAddressEventListeners() {
                    // Reattach event listeners for edit buttons
                    document.querySelectorAll('[data-bs-target="#editAddressModal"]').forEach(button => {
                        button.removeEventListener('click', handleEditButtonClick);
                        button.addEventListener('click', handleEditButtonClick);
                    });

                    // Reattach event listeners for delete buttons
                    document.querySelectorAll('[onclick^="confirmDeleteAddress"]').forEach(button => {
                        const matches = button.getAttribute('onclick').match(/confirmDeleteAddress\('(.+?)','(.+?)'\)/);
                        if (matches) {
                            button.removeAttribute('onclick');
                            button.addEventListener('click', function () {
                                confirmDeleteAddress(matches[1], matches[2]);
                            });
                        }
                    });
                }

                function handleEditButtonClick() {
                    const addressData = this.getAttribute('onclick')?.match(/loadAddressForEdit\('(.+?)'\)/)?.[1];
                    if (addressData) {
                        loadAddressForEdit(addressData);
                    }
                }

                // Order management functions
                window.loadOrderDetails = function (orderId) {
                    const orderDetailsContent = document.getElementById('orderDetailsContent');
                    if (!orderDetailsContent) return;

                    orderDetailsContent.innerHTML = `
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    `;

                    fetch(`/api/orders/${orderId}`)
                        .then(response => response.json())
                        .then(order => {
                            orderDetailsContent.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h5>Order #${order.orderNumber}</h5>
                        <p class="text-muted">Placed on ${new Date(order.orderDate).toLocaleDateString()}</p>
                        <div class="mb-4">
                            <h6>Shipping Address</h6>
                            <p>
                                ${order.shippingAddress?.name || 'N/A'}<br>
                                ${order.shippingAddress?.street || ''}<br>
                                ${order.shippingAddress?.city || ''}, ${order.shippingAddress?.state || ''} ${order.shippingAddress?.pincode || ''}<br>
                                ${order.shippingAddress?.country || ''}
                            </p>
                        </div>
                        <div>
                            <h6>Payment Method</h6>
                            <p><i class="fab fa-cc-visa me-2"></i>${order.paymentMethod || 'N/A'}<br>Billing address same as shipping</p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>Order Summary</h6>
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr><th>Product</th><th>Price</th><th>Qty</th><th>Total</th></tr>
                                </thead>
                                <tbody>
                                    ${order.items.map(item => `
                                        <tr>
                                            <td>${item.name || 'N/A'}</td>
                                            <td>${item.price?.toFixed(2) || '0.00'}</td>
                                            <td>${item.quantity || 0}</td>
                                            <td>${(item.price * item.quantity)?.toFixed(2) || '0.00'}</td>
                                        </tr>
                                    `).join('')}
                                    <tr><td colspan="3" class="text-end">Subtotal:</td><td>${order.subtotal?.toFixed(2) || '0.00'}</td></tr>
                                    <tr><td colspan="3" class="text-end">Shipping:</td><td>${order.shippingCost?.toFixed(2) || '0.00'}</td></tr>
                                    <tr><td colspan="3" class="text-end fw-bold">Total:</td><td class="fw-bold">${order.totalAmount?.toFixed(2) || '0.00'}</td></tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="alert alert-info"><i class="fas fa-info-circle me-2"></i><strong>Status:</strong> ${order.status || 'N/A'}</div>
                    </div>
                </div>
            `;
                        })
                        .catch(error => {
                            if (typeof Swal !== 'undefined') {
                                Swal.fire('Error!', 'Failed to load order details. Please try again.', 'error');
                            } else {
                                alert('Failed to load order details. Please try again.');
                            }
                            console.error('Error:', error);
                        });
                };

                // Cancel order functionality
                window.confirmCancelOrder = async function (orderId, index) {
                    const cancelBtn = document.getElementById(`cancelBtn${index}`);
                    const statusBadge = document.getElementById(`orderStats${index}`);

                    let isConfirmed = false;
                    if (typeof Swal !== 'undefined') {
                        const result = await Swal.fire({
                            title: 'Cancel Order?',
                            text: "Are you sure you want to cancel this order?",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Yes, cancel it!',
                            cancelButtonText: 'Keep order'
                        });
                        isConfirmed = result.isConfirmed;
                    } else {
                        isConfirmed = confirm('Are you sure you want to cancel this order?');
                    }

                    if (isConfirmed) {
                        try {
                            const response = await fetch('/cancellOrder', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ orderId })
                            });

                            const result = await response.json();

                            if (response.ok) {
                                if (cancelBtn) cancelBtn.style.display = 'none';
                                if (statusBadge) {
                                    statusBadge.textContent = 'cancelled';
                                    statusBadge.className = "badge bg-danger p-2";
                                }

                                if (typeof Swal !== 'undefined') {
                                    await Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: result.message || 'Order cancelled',
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                } else {
                                    showAlert(result.message || 'Order cancelled', 'success');
                                }
                            } else {
                                if (typeof Swal !== 'undefined') {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: result.message || 'Order cancellation failed',
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                } else {
                                    showAlert(result.message || 'Order cancellation failed', 'error');
                                }
                            }
                        } catch (error) {
                            if (typeof Swal !== 'undefined') {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Network error occurred',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            } else {
                                showAlert('Network error occurred', 'error');
                            }
                            console.error('Error:', error);
                        }
                    }
                };

                // Return order functionality
                window.returnOrder = async function (orderId, index) {
                    try {
                        const returnBtn = document.getElementById(`returnBtn${index}`);
                        const statusBadge = document.getElementById(`orderStats${index}`);
                        const itemId = null;

                        let reason = '';
                        if (typeof Swal !== 'undefined') {
                            const { value } = await Swal.fire({
                                title: 'Return Reason',
                                input: 'text',
                                inputLabel: 'Please provide a reason for returning the order:',
                                inputPlaceholder: 'e.g., Wrong item received',
                                showCancelButton: true,
                                confirmButtonText: 'Submit',
                                cancelButtonText: 'Cancel',
                                inputValidator: (value) => {
                                    if (!value) {
                                        return 'Please provide a reason!';
                                    }
                                }
                            });

                            if (!value) return; // User cancelled
                            reason = value;
                        } else {
                            reason = prompt('Please provide a reason for returning the order:');
                            if (!reason) return; // User cancelled
                        }

                        const response = await fetch('/returnReq?_method=PATCH', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                itemId,
                                orderId,
                                reason
                            })
                        });

                        const data = await response.json();

                        if (response.ok) {
                            if (statusBadge) {
                                statusBadge.textContent = 'returnRequested';
                                statusBadge.className = "badge bg-light text-dark p-2";
                            }

                            if (returnBtn) returnBtn.style.display = 'none';

                            if (typeof Swal !== 'undefined') {
                                await Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: data.message || 'Return request submitted!',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                });
                            } else {
                                showAlert(data.message || 'Return request submitted!', 'success');
                            }
                        } else {
                            if (typeof Swal !== 'undefined') {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: data.message || 'Return request failed!',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                });
                            } else {
                                showAlert(data.message || 'Return request failed!', 'error');
                            }
                        }
                    } catch (error) {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: 'Return request failed due to a network or server error!',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                        } else {
                            showAlert('Return request failed due to a network or server error!', 'error');
                        }
                        console.error('Error:', error);
                    }
                };

                //Filter orders
                let filter = ''
                let page = document.querySelectorAll('.page-btn').value
                document.querySelectorAll('.dropdown-menu .dropdown-item')
                    .forEach((item) => {
                        item.addEventListener('click', async function (e) {
                            e.preventDefault();
                            try {
                                filter = e.target.getAttribute('data-filter') || ''


                                const response = await fetch(`/userProfile?filter=${encodeURIComponent(filter)}&page=${encodeURIComponent(page)}`, {
                                    headers: {
                                        'Accept': 'application/json',
                                        'Content-Type': 'application/json'
                                    }
                                })

                                if (!response.ok) {
                                    Swal.fire({
                                        toast: true,
                                        icon: 'error',
                                        title: 'Failed to fetch orders',
                                        position: 'top-end',
                                        showConfirmButton: false,
                                        timer: 2000,
                                        timerProgressBar: true
                                    });
                                    return
                                }

                                const data = await response.json()
                                const orders = data.order || []
                                const currentPage = data.currentPage || 1
                                const totalPage = data.totalPage || 1

                                const container = document.querySelector('#orders .card-body')
                                container.innerHTML = ''

                                if (orders.length === 0) {
                                    container.innerHTML = `
                        <div class="empty-state text-center py-5">
                          <i class="fas fa-shopping-bag fa-2x text-muted"></i>
                          <h4 class="mt-3">No Orders Found</h4>
                          <p class="mb-4">No orders with status <b>${filter}</b> were found.</p>
                          <a href="/shop" class="btn btn-primary">
                            <i class="fas fa-store me-1"></i> Start Shopping
                          </a>
                        </div>
                    `
                                    return
                                }

                                // utility like getStatusBadgeClass() from your backend
                                function getStatusBadgeClass(status) {
                                    switch (status.toLowerCase()) {
                                        case 'pending': return 'bg-warning text-dark'
                                        case 'processing': return 'bg-info text-white'
                                        case 'shipped': return 'bg-primary text-white'
                                        case 'delivered': return 'bg-success'
                                        case 'cancelled': return 'bg-danger'
                                        case 'returnrequested': return 'bg-secondary'
                                        case 'returned': return 'bg-dark'
                                        case 'reutrnrejected': return 'bg-danger'
                                        default: return 'bg-light text-dark'
                                    }
                                }

                                // rebuild all orders dynamically
                                orders.forEach((order, index) => {
                                    container.innerHTML += `
                        <div class="order-item p-3 mb-3 border rounded" data-status="${order.status.toLowerCase()}">
                          <div class="d-flex justify-content-between flex-wrap mb-2">
                            <h5>Order #${order.orderId}</h5>
                            <span id="orderStats${index}" class="badge ${getStatusBadgeClass(order.status)} p-2">
                              ${order.status}
                            </span>
                          </div>

                          <p class="text-muted mb-1">
                            <i class="fas fa-calendar-alt me-1"></i>
                            Placed on ${new Date(order.createdOn).toLocaleDateString()}
                          </p>

                          <div class="d-flex justify-content-between flex-wrap align-items-center">
                            <div>
                              <p class="mb-2">
                                ${order.orderedItems.length} item${order.orderedItems.length !== 1 ? 's' : ''} â€¢ 
                                Total: â‚¹${order.finalAmount.toFixed(2)}
                              </p>
                              ${order.returnReason ? `
                                <p class="text-danger small mb-1">
                                  <i class="fas fa-undo me-1"></i>
                                  Return Reason: ${order.returnReason}
                                </p>` : ''}
                            </div>

                            <div class="mt-2 mt-sm-0">
                              <a href="/orderDetailPage?orderId=${order.orderId}">
                                <button class="btn btn-sm btn-outline-primary me-2">
                                  <i class="fas fa-eye me-1"></i> Details
                                </button>
                              </a>
                              ${(order.status !== 'Delivered' && order.status !== 'cancelled' &&
                                            order.status !== 'returnRequested' && order.status !== 'returned' &&
                                            order.status !== 'reutrnRejected')
                                            ? `<button class="btn btn-sm btn-outline-danger"
                                    id="cancelBtn${index}"
                                    onclick="confirmCancelOrder('${order.orderId}', '${index}')">
                                    <i class="fas fa-times me-1"></i> Cancel
                                  </button>`
                                            : order.status === 'Delivered'
                                                ? `<button id="returnBtn${index}"
                                        class="btn btn-sm btn-outline-secondary"
                                        onclick="returnOrder('${order.orderId}', '${index}')">
                                        <i class="fas fa-times me-1"></i> Return
                                      </button>`
                                                : ''
                                        }
                            </div>
                          </div>
                        </div>
                    `;
                                })

                                // ðŸ”¥ append pagination after orders
                                container.innerHTML += `
                    <div class="pagination mt-3">
                      ${currentPage > 1
                                        ? `<button onclick="paginationForOrderSection(${currentPage - 1})" 
                                   class="page-btn" aria-label="Previous Page">&lt;</button>`
                                        : ''}
                      
                      <button class="page-btn active" aria-current="page">${currentPage}</button>
                      <span class="page-info">of ${totalPage}</span>
                      
                      ${currentPage < totalPage
                                        ? `<button onclick="paginationForOrderSection(${currentPage + 1})" 
                                   class="page-btn" aria-label="Next Page">&gt;</button>`
                                        : ''}
                    </div>
                `

                            } catch (error) {
                                console.error(error);
                                Swal.fire({
                                    toast: true,
                                    icon: 'error',
                                    title: 'Something went wrong!',
                                    position: 'top-end',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                });
                            }
                        })
                    });

                //Filter orders
                async function paginationForOrderSection(page) {
                    try {
                        const response = await fetch(`/userProfile?page=${encodeURIComponent(page)}&filter=${encodeURIComponent(filter)}`, {
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            }
                        })
                        if (!response.ok) {
                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: 'Failed to fetch orders',
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                            return
                        }
                        const data = await response.json();
                        const orders = data.order || [];
                        const container = document.querySelector('#orders .card-body');
                        container.innerHTML = ''

                        if (orders.length === 0) {
                            container.innerHTML = `
        <div class="empty-state text-center py-5">
          <i class="fas fa-shopping-bag fa-2x text-muted"></i>
          <h4 class="mt-3">No Orders Found</h4>
          <p class="mb-4">No orders on page <b>${page}</b>.</p>
          <a href="/shop" class="btn btn-primary"><i class="fas fa-store me-1"></i> Start Shopping</a>
        </div>
      `
                            return
                        }

                        // same getStatusBadgeClass() as before
                        function getStatusBadgeClass(status) {
                            switch (status.toLowerCase()) {
                                case 'pending': return 'bg-warning text-dark';
                                case 'processing': return 'bg-info text-white';
                                case 'shipped': return 'bg-primary text-white';
                                case 'delivered': return 'bg-success';
                                case 'cancelled': return 'bg-danger';
                                case 'returnrequested': return 'bg-secondary';
                                case 'returned': return 'bg-dark';
                                case 'reutrnrejected': return 'bg-danger';
                                default: return 'bg-light text-dark';
                            }
                        }

                        // rebuild order list
                        orders.forEach((order, index) => {
                            container.innerHTML += `
        <div class="order-item p-3 mb-3 border rounded" data-status="${order.status.toLowerCase()}">
          <div class="d-flex justify-content-between flex-wrap mb-2">
            <h5>Order #${order.orderId}</h5>
            <span id="orderStats${index}" class="badge ${getStatusBadgeClass(order.status)} p-2">
              ${order.status}
            </span>
          </div>

          <p class="text-muted mb-1">
            <i class="fas fa-calendar-alt me-1"></i>
            Placed on ${new Date(order.createdOn).toLocaleDateString()}
          </p>

          <div class="d-flex justify-content-between flex-wrap align-items-center">
            <div>
              <p class="mb-2">
                ${order.orderedItems.length} item${order.orderedItems.length !== 1 ? 's' : ''} â€¢ 
                Total: â‚¹${order.finalAmount.toFixed(2)}
              </p>
              ${order.returnReason ? `
                <p class="text-danger small mb-1">
                  <i class="fas fa-undo me-1"></i>
                  Return Reason: ${order.returnReason}
                </p>` : ''}
            </div>

            <div class="mt-2 mt-sm-0">
              <a href="/orderDetailPage?orderId=${order.orderId}">
                <button class="btn btn-sm btn-outline-primary me-2">
                  <i class="fas fa-eye me-1"></i> Details
                </button>
              </a>
              ${(order.status !== 'Delivered' && order.status !== 'cancelled' &&
                                    order.status !== 'returnRequested' && order.status !== 'returned' &&
                                    order.status !== 'reutrnRejected')
                                    ? `<button class="btn btn-sm btn-outline-danger"
                        id="cancelBtn${index}"
                        onclick="confirmCancelOrder('${order.orderId}', '${index}')">
                        <i class="fas fa-times me-1"></i> Cancel
                      </button>`
                                    : order.status === 'Delivered'
                                        ? `<button id="returnBtn${index}"
                        class="btn btn-sm btn-outline-secondary"
                        onclick="returnOrder('${order.orderId}', '${index}')">
                        <i class="fas fa-times me-1"></i> Return
                      </button>`
                                        : ''
                                }
            </div>
          </div>
        </div>
      `;
                        });

                        // re-render pagination controls
                        const paginationContainer = document.createElement('div');
                        paginationContainer.classList.add('pagination');
                        paginationContainer.innerHTML = `
      ${page > 1
                                ? `<button onclick="paginationForOrderSection(${page - 1})" class="page-btn" aria-label="Previous Page">&lt;</button>`
                                : ''
                            }
      <button class="page-btn active" aria-current="page">${page}</button>
      <span class="page-info">of ${data.totalPage}</span>
      ${page < data.totalPage
                                ? `<button onclick="paginationForOrderSection(${page + 1})" class="page-btn" aria-label="Next Page">&gt;</button>`
                                : ''
                            }
    `;

                        container.appendChild(paginationContainer);

                    } catch (error) {
                        console.error(error);
                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: 'Something went wrong!',
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                    }
                }

            </script>
</body>

</html>
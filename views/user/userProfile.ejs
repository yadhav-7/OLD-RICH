<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile | <%= user.username %>
    </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #2e7d32;
            --primary-light: #4caf50;
            --primary-dark: #1b5e20;
            --secondary-color: #ffffff;
            --accent-color: #81c784;
            --text-color: #333333;
            --light-gray: #f5f5f5;
            --success-color: #388e3c;
            --warning-color: #f57c00;
            --danger-color: #d32f2f;
            --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            --border-radius: 12px;
        }

        body {
            background-color: var(--secondary-color);
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            color: var(--text-color);
            line-height: 1.6;
        }

        .modal-content {
            box-shadow: 0 0 15px rgba(40, 167, 69, 0.2);
        }

        .border-success:focus {
            border-color: #28a745;
            box-shadow: 0 0 0 0.25rem rgba(40, 167, 69, 0.25);
        }

        .is-valid {
            border-color: #28a745 !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .is-invalid {
            border-color: #dc3545 !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .invalid-feedback {
            display: none;
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
        }

        .profile-header {
            background: linear-gradient(135deg, var(--secondary-color) 60%, var(--light-gray));
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            padding: 2.5rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(46, 125, 50, 0.1);
        }

        .profile-img {
            width: 160px;
            height: 160px;
            object-fit: cover;
            border: 6px solid var(--secondary-color);
            border-radius: 50%;
            box-shadow: 0 4px 8px rgba(46, 125, 50, 0.2);
            transition: transform 0.3s ease;
        }

        .profile-nav .nav-link {
            color: var(--text-color);
            font-weight: 600;
            padding: 0.75rem 1.75rem;
            border-radius: 8px;
            margin-right: 0.75rem;
            transition: all 0.3s ease;
            background: var(--secondary-color);
            border: 1px solid rgba(46, 125, 50, 0.2);
        }

        .profile-nav .nav-link.active,
        .profile-nav .nav-link:hover {
            background-color: var(--primary-color);
            color: var(--secondary-color);
            border-color: var(--primary-color);
        }

        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            margin-bottom: 2rem;
            background: var(--secondary-color);
            border: 1px solid rgba(46, 125, 50, 0.1);
        }

        .card-header {
            background: var(--primary-color);
            color: var(--secondary-color);
            border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }

        .btn-outline-primary {
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            color: var(--secondary-color);
        }

        .order-item {
            border-left: 4px solid var(--primary-color);
            background: rgba(76, 175, 80, 0.05);
            border-radius: 8px;
        }

        .badge-success {
            background-color: rgba(56, 142, 60, 0.1);
            color: var(--success-color);
        }

        .badge-delivered {
            background-color: rgba(56, 142, 60, 0.1);
            color: var(--success-color);
        }

        .badge-shipped {
            background-color: rgba(245, 124, 0, 0.1);
            color: var(--warning-color);
        }

        .verified-badge {
            color: var(--success-color);
        }

        .address-card.default {
            border: 2px solid var(--primary-color);
            background: rgba(76, 175, 80, 0.03);
        }

        .empty-state {
            background: var(--secondary-color);
            border: 1px dashed rgba(46, 125, 50, 0.3);
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(76, 175, 80, 0.25);
        }

        .modal-header {
            background-color: var(--primary-color);
            color: var(--secondary-color);
        }

        .progress-bar {
            background-color: var(--primary-color);
        }

        .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .page-link {
            color: var(--primary-color);
        }

        .alert-info {
            background-color: rgba(129, 199, 132, 0.2);
            border-color: rgba(129, 199, 132, 0.3);
            color: var(--text-color);
        }

        .table-hover tbody tr:hover {
            background-color: rgba(129, 199, 132, 0.1);
        }

        .dropdown-item:active {
            background-color: var(--primary-color);
        }

        .nav-tabs .nav-link.active {
            color: var(--primary-color);
            border-bottom: 2px solid var(--primary-color);
        }

        .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .pulse-animation {
            animation: pulse 0.5s ease-in-out;
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.1);
            }

            100% {
                transform: scale(1);
            }
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
    <%- include('../../views/partials/user/header',{title:'Home-page'}) %>
        <div class="container py-5">
            <div class="profile-header">
                <div class="row align-items-center">
                    <div class="col-md-2 text-center">
                        <img src="<%= user.profileImage || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.username) + '&background=2e7d32&color=fff&size=160' %>"
                            alt="Profile Image" class="profile-img mb-3" id="profileImagePreview">
                        <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal"
                            data-bs-target="#changeImageModal">
                            <i class="fas fa-camera me-1"></i> Change
                        </button>
                    </div>
                    <div class="col-md-6">
                        <h2 class="mb-2 fw-bold">
                            <%= user.username %>
                                <i class="fas fa-check-circle verified-badge" title="Verified Account"></i>
                        </h2>
                        <p class="text-muted mb-1"><i class="fas fa-envelope me-2"></i>
                            <%= user.email %>
                        </p>
                        <% if(user.phone) { %>
                            <p class="text-muted mb-1"><i class="fas fa-phone me-2"></i>
                                <%= user.phone %>
                            </p>
                            <% } %>
                                <p class="text-muted mb-0"><i class="fas fa-calendar-alt me-2"></i>Member since <%= new
                                        Date(user.createdAt).toLocaleDateString() %>
                                </p>
                    </div>
                    <div class="col-md-4 text-md-end mt-3 mt-md-0">
                        <button class="btn btn-primary me-2 mb-2" data-bs-toggle="modal"
                            data-bs-target="#editProfileModal">
                            <i class="fas fa-edit me-1"></i> Edit Profile
                        </button>
                    </div>
                </div>
            </div>

            <ul class="nav profile-nav mb-4 flex-nowrap overflow-auto pb-2" style="scrollbar-width: none;">
                <li class="nav-item"><a class="nav-link active" href="#profile" data-bs-toggle="tab"><i
                            class="fas fa-user me-1"></i> Profile</a></li>
                <li class="nav-item"><a class="nav-link" href="#address" data-bs-toggle="tab"><i
                            class="fas fa-home me-1"></i> Addresses</a></li>
                <li class="nav-item"><a class="nav-link" href="#orders" data-bs-toggle="tab"><i
                            class="fas fa-shopping-bag me-1"></i> Orders</a></li>
                <li class="nav-item"><a class="nav-link" href="#security" data-bs-toggle="tab"><i
                            class="fas fa-shield-alt me-1"></i> Security</a></li>
            </ul>

            <div class="tab-content">
                <div class="tab-pane fade show active" id="profile">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="card mb-4">
                                <div class="card-header"><i class="fas fa-info-circle me-2"></i> Personal Information
                                </div>
                                <div class="card-body">
                                    <div class="row mb-3">
                                        <div class="col-sm-4 fw-bold">Username:</div>
                                        <div class="col-sm-8">
                                            <%= user.username %>
                                        </div>
                                    </div>
                                    <div class="row mb-3">
                                        <div class="col-sm-4 fw-bold">Email:</div>
                                        <div class="col-sm-8">
                                            <%= user.email %>
                                                <span class="badge bg-success ms-2"><i
                                                        class="fas fa-check-circle me-1"></i>Verified</span>
                                        </div>
                                    </div>
                                    <% if(user.phone) { %>
                                        <div class="row mb-3">
                                            <div class="col-sm-4 fw-bold">Phone:</div>
                                            <div class="col-sm-8">
                                                <%= user.phone %>
                                            </div>
                                        </div>
                                        <% } else { %>
                                            <div class="row mb-3">
                                                <div class="col-sm-4 fw-bold">Phone:</div>
                                                <div class="col-sm-8 text-muted">Not provided</div>
                                            </div>
                                            <% } %>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="card mb-4">
                                <div class="card-header"><i class="fas fa-chart-line me-2"></i> Account Statistics</div>
                                <div class="card-body">
                                    <div class="row mb-3">
                                        <div class="col-6">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-primary bg-opacity-10 p-3 rounded me-3"><i
                                                        class="fas fa-shopping-bag text-primary"></i></div>
                                                <div>
                                                    <h6 class="mb-0">Total Orders</h6>
                                                    <h4 class="mb-0">12</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-success bg-opacity-10 p-3 rounded me-3"><i
                                                        class="fas fa-check-circle text-success"></i></div>
                                                <div>
                                                    <h6 class="mb-0">Completed</h6>
                                                    <h4 class="mb-0">8</h4>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-6">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-warning bg-opacity-10 p-3 rounded me-3"><i
                                                        class="fas fa-truck text-warning"></i></div>
                                                <div>
                                                    <h6 class="mb-0">In Progress</h6>
                                                    <h4 class="mb-0">2</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-danger bg-opacity-10 p-3 rounded me-3"><i
                                                        class="fas fa-times-circle text-danger"></i></div>
                                                <div>
                                                    <h6 class="mb-0">Cancelled</h6>
                                                    <h4 class="mb-0">2</h4>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="tab-pane fade" id="address">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-home me-2"></i> Saved Addresses</span>
                            <button class="btn btn-sm btn-primary" data-bs-toggle="modal"
                                data-bs-target="#addAddressModal">
                                <i class="fas fa-plus me-1"></i> Add New Address
                            </button>
                        </div>
                        <div class="card-body">
                            <% if (addressData && addressData.length> 0) { %>
                                <div class="row">
                                    <% addressData.forEach((address)=> { %>
                                        <div class="col-md-6 mb-4">
                                            <div
                                                class="card h-100 address-card <%= address.isDefault ? 'default' : '' %>">
                                                <div class="card-body">
                                                    <h5 class="card-title">
                                                        <%= address.addressType %> Address
                                                    </h5>
                                                    <p class="card-text mt-3">
                                                        <strong>
                                                            <%= address.name %>
                                                        </strong><br>
                                                        <%= address.street %><br>
                                                            <%= address.city %>, <%= address.state %> - <%=
                                                                        address.pincode %><br>
                                                                        <%= address.country %>
                                                    </p>
                                                    <p class="card-text"><strong>Phone:</strong>
                                                        <%= address.phone %>
                                                    </p>
                                                    <% if (address.altPhone) { %>
                                                        <p class="card-text"><strong>Alt Phone:</strong>
                                                            <%= address.altPhone %>
                                                        </p>
                                                        <% } %>
                                                </div>
                                                <div class="card-footer bg-transparent d-flex justify-content-between">
                                                    <button class="btn btn-sm btn-outline-primary"
                                                        data-bs-toggle="modal" data-bs-target="#editAddressModal"
                                                        onclick="loadAddressForEdit('<%= encodeURIComponent(JSON.stringify(address)) %>')">
                                                        <i class="fas fa-edit me-1"></i> Edit
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                        onclick="confirmDeleteAddress('<%= address._id %>')">
                                                        <i class="fas fa-trash me-1"></i> Remove
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                </div>
                                <% } else { %>
                                    <div class="empty-state text-center py-5">
                                        <i class="fas fa-map-marker-alt fa-2x text-muted"></i>
                                        <h4 class="mt-3">No Saved Addresses</h4>
                                        <p class="mb-4">You haven't saved any addresses yet. Add one to make checkout
                                            easier!</p>
                                        <button class="btn btn-primary" data-bs-toggle="modal"
                                            data-bs-target="#addAddressModal">
                                            <i class="fas fa-plus me-1"></i> Add Address
                                        </button>
                                    </div>
                                    <% } %>
                        </div>
                    </div>
                </div>

                <div class="tab-pane fade" id="orders">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-shopping-bag me-2"></i> Order History</span>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button"
                                    id="orderFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-filter me-1"></i> Filter
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="orderFilterDropdown">
                                    <li><a class="dropdown-item active" href="#" data-filter="all">All Orders</a></li>
                                    <li>
                                        <hr class="dropdown-divider">
                                    </li>
                                    <li><a class="dropdown-item" href="#" data-filter="delivered">Delivered</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="shipped">Shipped</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="processing">Processing</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="cancelled">Cancelled</a></li>
                                </ul>
                            </div>
                        </div>

                        <div class="card-body">
                            <% if(order && order.length> 0) { %>
                                <% order.forEach(order=> { %>
                                    <div class="order-item p-3 mb-3 border rounded"
                                        data-status="<%= order.status.toLowerCase() %>">
                                        <div class="d-flex justify-content-between flex-wrap mb-2">
                                            <h5>Order #<%= order.orderId %>
                                            </h5>
                                            <span class="badge <%= getStatusBadgeClass(order.status) %> p-2">
                                                <%= order.status %>
                                            </span>
                                        </div>

                                        <p class="text-muted mb-1"><i class="fas fa-calendar-alt me-1"></i>Placed on
                                            <%= new Date(order.createdOn).toLocaleDateString() %>
                                        </p>

                                        <div class="d-flex justify-content-between flex-wrap align-items-center">
                                            <div>
                                                <p class="mb-2">
                                                    <%= order.orderedItems.length %> item<%= order.orderedItems.length
                                                            !==1 ? 's' : '' %>
                                                            • Total: ₹<%= order.finalAmount.toFixed(2) %>
                                                </p>
                                                <% if(order.returnReason) { %>
                                                    <p class="text-danger small mb-1"><i
                                                            class="fas fa-undo me-1"></i>Return Reason: <%=
                                                            order.returnReason %>
                                                    </p>
                                                    <% } %>
                                            </div>


                                            <div class="mt-2 mt-sm-0">
                                                <a href="/orderDetailPage?orderId=<%= order._id %>">
                                                    <button class="btn btn-sm btn-outline-primary me-2">
                                                        <i class="fas fa-eye me-1"></i> Details
                                                    </button>
                                                </a>
                                                <% if(order.status !=='Delivered' && order.status !=='cancelled' && order.status!=='return Req') { %>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                        onclick="confirmCancelOrder('<%= order.orderId%>')">
                                                        <i class="fas fa-times me-1"></i> Cancel
                                                    </button>
                                                    <% } else if(order.status==='Delivered' ) { %>
                                                        <button class="btn btn-sm btn-outline-secondary"
                                                            onclick="returnOrder('<%= order.orderId%>')">
                                                            <i class="fas fa-times me-1"></i> return
                                                        </button>
                                                        <% } %>
                                            </div>
                                        </div>
                                    </div>
                                    <% }) %>

                                        <!-- Optional Pagination -->
                                        <!-- <nav aria-label="Page navigation" class="mt-4">
        <ul class="pagination justify-content-center">
          <li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>
          <li class="page-item active"><a class="page-link" href="#">1</a></li>
          <li class="page-item"><a class="page-link" href="#">2</a></li>
          <li class="page-item"><a class="page-link" href="#">Next</a></li>
        </ul>
      </nav> -->

                                        <% } else { %>
                                            <div class="empty-state text-center py-5">
                                                <i class="fas fa-shopping-bag fa-2x text-muted"></i>
                                                <h4 class="mt-3">No Orders Yet</h4>
                                                <p class="mb-4">You haven't placed any orders with us yet. Start
                                                    shopping to see your order history here!</p>
                                                <a href="/shop" class="btn btn-primary"><i
                                                        class="fas fa-store me-1"></i> Start Shopping</a>
                                            </div>
                                            <% } %>
                        </div>
                    </div>

                </div>

                <div class="tab-pane fade" id="security">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="card mb-4">
                                <div class="card-header"><i class="fas fa-lock me-2"></i> Password & Security</div>
                                <div class="card-body">
                                    <div class="alert alert-info d-flex align-items-center mb-4">
                                        <i class="fas fa-info-circle me-3"></i>
                                        <div><strong>Security Tip:</strong> Use a strong, unique password and change it
                                            regularly to keep your account secure.</div>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <div>
                                            <h6 class="mb-0">Password</h6>
                                        </div>
                                        <a href="/changePassword"><button
                                                class="btn btn-sm btn-outline-primary">Change</button></a>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <div>
                                            <h6 class="mb-0">
                                                <%= user.email %>
                                            </h6>
                                        </div>
                                        <a href="/passCheckforEmailchange"><button
                                                class="btn btn-sm btn-outline-primary"><i class="fas fa-key me-1"></i>
                                                Change</button></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Profile Modal -->
        <div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content border-0 shadow">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title" id="editProfileModalLabel">Edit Profile</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="editProfileForm" novalidate>
                            <div class="text-center mb-4">
                                <div class="position-relative d-inline-block">
                                    <img id="editProfileImagePreview"
                                        src="<%= user.profileImage || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.username) + '&background=2e7d32&color=fff&size=160' %>"
                                        class="rounded-circle border border-success border-3" width="120" height="120"
                                        alt="Profile photo">
                                    <button type="button"
                                        class="btn btn-success btn-sm position-absolute bottom-0 end-0 rounded-circle">
                                        <i class="fas fa-camera"></i>
                                        <input type="file" id="profilePhotoUpload" accept="image/*" class="d-none">
                                    </button>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="username" class="form-label text-success fw-bold">Username</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-white text-success">@</span>
                                    <input type="text" class="form-control border-success" id="editUsername"
                                        pattern="^[a-zA-Z0-9_]{3,20}$" value="<%= user.username %>" required>
                                    <div class="invalid-feedback" id="usernameError">Username must be 3-20 characters,
                                        letters, numbers, or underscores only</div>
                                </div>
                            </div>
                            <!-- <div class="mb-3">
                                <label class="form-label text-success fw-bold">Email Address</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-white text-success"><i
                                            class="fas fa-envelope"></i></span>
                                    <input type="email" class="form-control border-success" value="<%#= user.email %>"
                                        id="editEmail" readonly>
                                </div>
                            </div> -->
                            <div class="mb-3">
                                <label for="phone" class="form-label text-success fw-bold">Phone Number</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-white text-success"><i
                                            class="fas fa-phone"></i></span>
                                    <input type="tel" class="form-control border-success" id="editPhone"
                                        pattern="^[\d\s+()-]{7,20}$" value="<%= user.phone || '' %>">
                                    <div class="invalid-feedback" id="phoneError">Please enter a valid phone number
                                        (7-20 digits)</div>
                                </div>
                            </div>
                            <div class="modal-footer bg-light">
                                <button type="button" class="btn btn-outline-secondary"
                                    data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-success" id="saveProfileChanges"
                                    onclick="editProfile('<%=user._id%>')">Save Changes</button>
                            </div>
                        </form>
                    </div>

                </div>
            </div>
        </div>

        <!-- Change Image Modal -->
        <div class="modal fade" id="changeImageModal" tabindex="-1" aria-labelledby="changeImageModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="changeImageModalLabel">Change Profile Image</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="text-center mb-4">
                            <img src="<%= user.profileImage || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.username) + '&background=2e7d32&color=fff&size=160' %>"
                                alt="Current Profile Image" class="img-fluid rounded-circle mb-3"
                                style="width: 160px; height: 160px; object-fit: cover;" id="currentProfileImage">
                        </div>
                        <form id="changeImageForm">
                            <div class="mb-3">
                                <label for="newProfileImage" class="form-label">Upload New Image</label>
                                <input class="form-control" type="file" id="newProfileImage" accept="image/*">
                                <div class="form-text">Recommended size: 160x160 pixels. Max file size: 2MB.</div>
                            </div>
                            <div class="text-center">
                                <button type="button" class="btn btn-outline-danger" id="removeProfileImage">
                                    <i class="fas fa-trash me-1"></i> Remove Current Image
                                </button>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="saveProfileImage">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Address Modal -->
        <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content border-0 shadow">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <div class="modal-body bg-light">
                        <form id="addAddressForm" novalidate>
                            <div class="mb-3">
                                <label for="name" class="form-label">Full Name</label>
                                <input type="text" class="form-control" id="name" pattern="^[a-zA-Z\s]{3,50}$" required>
                                <div class="invalid-feedback" id="nameError">Please enter a valid name (3-50 letters, no
                                    special characters)</div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="phone" class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" id="phone" pattern="^[\d\s+()-]{7,20}$"
                                        required>
                                    <div class="invalid-feedback" id="phoneError">Please enter a valid phone number
                                        (7-20 digits)</div>
                                </div>
                                <div class="col-md-6">
                                    <label for="altPhone" class="form-label">Alternate Phone (Optional)</label>
                                    <input type="tel" class="form-control" id="altPhone"
                                        pattern="^[\d\s+()-]{7,20}$|^$">
                                    <div class="invalid-feedback" id="altPhoneError">Please enter a valid phone number
                                        (7-20 digits)</div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="addressType" class="form-label">Address Type</label>
                                <select class="form-select" id="addressType" required>
                                    <option value="" selected disabled>Select address type</option>
                                    <option value="Home">Home</option>
                                    <option value="Office">Office</option>
                                    <option value="Other">Other</option>
                                </select>
                                <div class="invalid-feedback" id="addressTypeError">Please select an address type</div>
                            </div>
                            <div class="mb-3">
                                <label for="country" class="form-label">Country</label>
                                <select class="form-select" id="country" required>
                                    <option value="" selected disabled>Select country</option>
                                    <option value="IN">India</option>
                                    <option value="CA">Canada</option>
                                    <option value="GB">United Kingdom</option>
                                    <option value="AU">Australia</option>
                                    <option value="other">Other</option>
                                </select>
                                <div class="invalid-feedback" id="countryError">Please select a country</div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="state" class="form-label">State</label>
                                    <input type="text" class="form-control" id="state" pattern="^[a-zA-Z\s-]{2,50}$"
                                        required>
                                    <div class="invalid-feedback" id="stateError">Please enter a valid state name</div>
                                </div>
                                <div class="col-md-6">
                                    <label for="city" class="form-label">City</label>
                                    <input type="text" class="form-control" id="city" pattern="^[a-zA-Z\s-]{2,50}$"
                                        required>
                                    <div class="invalid-feedback" id="cityError">Please enter a valid city name</div>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-8">
                                    <label for="street" class="form-label">Street Address</label>
                                    <input type="text" class="form-control" id="street"
                                        pattern="^[a-zA-Z0-9\s,.'-]{5,100}$" required>
                                    <div class="invalid-feedback" id="streetError">Please enter a valid street address
                                        (5-100 characters)</div>
                                </div>
                                <div class="col-md-4">
                                    <label for="pincode" class="form-label">Postal/ZIP Code</label>
                                    <input type="text" class="form-control" id="pincode" pattern="^[a-zA-Z0-9-]{3,10}$"
                                        required>
                                    <div class="invalid-feedback" id="pincodeError">Please enter a valid postal/ZIP code
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer bg-white">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="saveAddress">Save Address</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Address Modal -->
        <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content border-0 shadow">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <div class="modal-body bg-light">
                        <form id="editAddressForm" novalidate>
                            <input type="hidden" id="editAddressId">
                            <div class="mb-3">
                                <label for="editAddressType" class="form-label">Address Type</label>
                                <select class="form-select" id="editAddressType" required>
                                    <option value="" selected disabled>Select address type</option>
                                    <option value="Home">Home</option>
                                    <option value="Office">Office</option>
                                    <option value="Other">Other</option>
                                </select>
                                <div class="invalid-feedback" id="editAddressTypeError">Please select an address type
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="editName" class="form-label">Full Name</label>
                                <input type="text" class="form-control" id="editName" pattern="^[a-zA-Z\s]{3,50}$"
                                    required>
                                <div class="invalid-feedback" id="editNameError">Please enter a valid name (3-50
                                    letters, no special characters)</div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editPhone" class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" id="editPhone" pattern="^[\d\s+()-]{7,20}$"
                                        required>
                                    <div class="invalid-feedback" id="editPhoneError">Please enter a valid phone number
                                        (7-20 digits)</div>
                                </div>
                                <div class="col-md-6">
                                    <label for="editAltPhone" class="form-label">Alternate Phone (Optional)</label>
                                    <input type="tel" class="form-control" id="editAltPhone"
                                        pattern="^[\d\s+()-]{7,20}$|^$">
                                    <div class="invalid-feedback" id="editAltPhoneError">Please enter a valid phone
                                        number (7-20 digits)</div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="editCountry" class="form-label">Country</label>
                                <select class="form-select" id="editCountry" required>
                                    <option value="" selected disabled>Select country</option>
                                    <option value="IN">India</option>
                                    <option value="CA">Canada</option>
                                    <option value="GB">United Kingdom</option>
                                    <option value="AU">Australia</option>
                                    <option value="other">Other</option>
                                </select>
                                <div class="invalid-feedback" id="editCountryError">Please select a country</div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editState" class="form-label">State</label>
                                    <input type="text" class="form-control" id="editState" pattern="^[a-zA-Z\s-]{2,50}$"
                                        required>
                                    <div class="invalid-feedback" id="editStateError">Please enter a valid state name
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label for="editCity" class="form-label">City</label>
                                    <input type="text" class="form-control" id="editCity" pattern="^[a-zA-Z\s-]{2,50}$"
                                        required>
                                    <div class="invalid-feedback" id="editCityError">Please enter a valid city name
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-8">
                                    <label for="editStreet" class="form-label">Street Address</label>
                                    <input type="text" class="form-control" id="editStreet"
                                        pattern="^[a-zA-Z0-9\s,.'-]{5,100}$" required>
                                    <div class="invalid-feedback" id="editStreetError">Please enter a valid street
                                        address (5-100 characters)</div>
                                </div>
                                <div class="col-md-4">
                                    <label for="editPincode" class="form-label">Postal/ZIP Code</label>
                                    <input type="text" class="form-control" id="editPincode"
                                        pattern="^[a-zA-Z0-9-]{3,10}$" required>
                                    <div class="invalid-feedback" id="editPincodeError">Please enter a valid postal/ZIP
                                        code</div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer bg-white">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="updateAddress">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>


        <!-- Confirmation Modals -->
        <div class="modal fade" id="confirmDeleteAddressModal" tabindex="-1"
            aria-labelledby="confirmDeleteAddressModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title" id="confirmDeleteAddressModalLabel">Confirm Deletion</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this address? This action cannot be undone.</p>
                        <input type="hidden" id="addressToDeleteId">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" id="confirmDeleteAddressBtn">Delete
                            Address</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="confirmCancelOrderModal" tabindex="-1"
            aria-labelledby="confirmCancelOrderModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-warning text-dark">
                        <h5 class="modal-title" id="confirmCancelOrderModalLabel">Confirm Order Cancellation</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to cancel this order? Some items may not be eligible for cancellation
                            if they've already been processed.</p>
                        <input type="hidden" id="orderToCancelId">
                        <div class="form-group mt-3">
                            <label for="cancelReason" class="form-label">Reason for cancellation (optional):</label>
                            <textarea class="form-control" id="cancelReason" rows="2"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Go Back</button>
                        <button type="button" class="btn btn-warning" id="confirmCancelOrderBtn">Cancel Order</button>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script>

            // Helper function for status badge
            function getStatusBadgeClass(status) {
                switch (status.toLowerCase()) {
                    case 'delivered': return 'badge-delivered';
                    case 'shipped': return 'badge-shipped';
                    case 'completed': return 'badge-completed';
                    case 'processing': return 'badge bg-info';
                    case 'cancelled': return 'badge bg-danger';
                    default: return 'badge bg-secondary';
                }
            }

            // Validation patterns
            const patterns = {
                username: /^[a-zA-Z0-9_]{3,20}$/,
                phone: /^[\d\s+()-]{7,20}$/,
                altPhone: /^[\d\s+()-]{7,20}$|^$/,
                name: /^[a-zA-Z\s]{3,50}$/,
                state: /^[a-zA-Z\s-]{2,50}$/,
                city: /^[a-zA-Z\s-]{2,50}$/,
                street: /^[a-zA-Z0-9\s,.'-]{5,100}$/,
                pincode: /^[a-zA-Z0-9-]{3,10}$/,
                bio: /^.{0,200}$/
            };

            // Error messages
            function getErrorMessage(fieldId) {
                const messages = {
                    username: 'Username must be 3-20 characters, letters, numbers, or underscores only',
                    phone: 'Please enter a valid phone number (7-20 digits)',
                    altPhone: 'Please enter a valid phone number (7-20 digits)',
                    name: 'Please enter a valid name (3-50 letters, no special characters)',
                    state: 'Please enter a valid state name (2-50 characters)',
                    city: 'Please enter a valid city name (2-50 characters)',
                    street: 'Please enter a valid street address (5-100 characters)',
                    pincode: 'Please enter a valid postal/ZIP code (3-10 characters)',
                    bio: 'Bio cannot exceed 200 characters'
                };
                return messages[fieldId] || 'Invalid input';
            }

            // Validate field
            function validateField(field) {
                const fieldId = field.id;
                const errorElement = document.getElementById(`${fieldId}Error`);
                const value = field.value.trim();

                if (field.required && !value) {
                    field.classList.add('is-invalid');
                    field.classList.remove('is-valid');
                    errorElement.style.display = 'block';
                    errorElement.textContent = 'This field is required';
                    return false;
                }

                if (field.pattern && value && !new RegExp(field.pattern).test(value)) {
                    field.classList.add('is-invalid');
                    field.classList.remove('is-valid');
                    errorElement.style.display = 'block';
                    errorElement.textContent = getErrorMessage(fieldId);
                    return false;
                }

                field.classList.remove('is-invalid');
                field.classList.add('is-valid');
                errorElement.style.display = 'none';
                return true;
            }

            // Validate select field
            function validateSelect(select) {
                const selectId = select.id;
                const errorElement = document.getElementById(`${selectId}Error`);
                if (select.required && !select.value) {
                    select.classList.add('is-invalid');
                    select.classList.remove('is-valid');
                    errorElement.style.display = 'block';
                    errorElement.textContent = 'Please select an option';
                    return false;
                }
                select.classList.remove('is-invalid');
                select.classList.add('is-valid');
                errorElement.style.display = 'none';
                return true;
            }

            // Validate entire form
            function validateForm(form) {
                let isValid = true;
                const inputs = form.querySelectorAll('input[pattern], input[required]');
                const selects = form.querySelectorAll('select[required]');
                inputs.forEach(input => { isValid &= validateField(input); });
                selects.forEach(select => { isValid &= validateSelect(select); });
                return isValid;
            }

            // Show alert
            function showAlert(message, type) {
                const existingAlert = document.querySelector('.custom-alert');
                if (existingAlert) existingAlert.remove();
                const alertDiv = document.createElement('div');
                alertDiv.className = `custom-alert alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
                alertDiv.style.zIndex = '2000';
                alertDiv.style.minWidth = '300px';
                alertDiv.role = 'alert';
                alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
                document.body.appendChild(alertDiv);
                setTimeout(() => {
                    const bsAlert = new bootstrap.Alert(alertDiv);
                    bsAlert.close();
                }, 5000);
            }

            document.addEventListener('DOMContentLoaded', function () {
                // Initialize tabs
                const triggerTabList = [].slice.call(document.querySelectorAll('.profile-nav a'));
                triggerTabList.forEach(function (triggerEl) {
                    const tabTrigger = new bootstrap.Tab(triggerEl);
                    triggerEl.addEventListener('click', function (event) {
                        event.preventDefault();
                        tabTrigger.show();
                        localStorage.setItem('activeProfileTab', triggerEl.getAttribute('href'));
                    });
                });

                const activeTab = localStorage.getItem('activeProfileTab');
                if (activeTab) {
                    const triggerEl = document.querySelector(`.profile-nav a[href="${activeTab}"]`);
                    if (triggerEl) bootstrap.Tab.getInstance(triggerEl).show();
                }

                // Initialize tooltips
                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.forEach(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

                // Order filter
                document.querySelectorAll('[data-filter]').forEach(filter => {
                    filter.addEventListener('click', function (e) {
                        e.preventDefault();
                        const filterValue = this.getAttribute('data-filter');
                        document.querySelectorAll('[data-filter]').forEach(item => item.classList.remove('active'));
                        this.classList.add('active');
                        const allOrders = document.querySelectorAll('.order-item');
                        allOrders.forEach(order => {
                            order.style.display = filterValue === 'all' || order.getAttribute('data-status') === filterValue ? 'block' : 'none';
                        });
                    });
                });

                // Image handling
                const profilePhotoUpload = document.getElementById('profilePhotoUpload');
                const editProfileImagePreview = document.getElementById('editProfileImagePreview');
                const newProfileImageInput = document.getElementById('newProfileImage');
                const currentProfileImage = document.getElementById('currentProfileImage');
                const profileImagePreview = document.getElementById('profileImagePreview');
                const cameraButton = document.querySelector('#editProfileModal .position-relative.d-inline-block button');

                function handleImagePreview(file, previewElements) {
                    if (!file) return;
                    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
                    if (!validTypes.includes(file.type)) {
                        showAlert('Please select a valid image file (JPEG, PNG, GIF, or WEBP)', 'danger');
                        return;
                    }
                    const maxSize = 2 * 1024 * 1024; // 2MB
                    if (file.size > maxSize) {
                        showAlert('Image size should be less than 2MB', 'danger');
                        return;
                    }
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const img = new Image();
                        img.onload = function () {
                            if (img.width !== img.height) showAlert('For best results, use a square image', 'warning');
                            previewElements.forEach(el => {
                                el.src = e.target.result;
                                el.classList.add('pulse-animation');
                                setTimeout(() => el.classList.remove('pulse-animation'), 500);
                            });
                        };
                        img.src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                }

                if (profilePhotoUpload && cameraButton) {
                    cameraButton.addEventListener('click', () => profilePhotoUpload.click());
                    profilePhotoUpload.addEventListener('change', function () {
                        handleImagePreview(this.files[0], [editProfileImagePreview, profileImagePreview]);
                    });
                    editProfileImagePreview.addEventListener('dragover', e => {
                        e.preventDefault();
                        editProfileImagePreview.classList.add('border-primary');
                    });
                    editProfileImagePreview.addEventListener('dragleave', () => {
                        editProfileImagePreview.classList.remove('border-primary');
                    });
                    editProfileImagePreview.addEventListener('drop', e => {
                        e.preventDefault();
                        editProfileImagePreview.classList.remove('border-primary');
                        const file = e.dataTransfer.files[0];
                        if (file) {
                            profilePhotoUpload.files = e.dataTransfer.files;
                            handleImagePreview(file, [editProfileImagePreview, profileImagePreview]);
                        }
                    });
                }

                if (newProfileImageInput) {
                    newProfileImageInput.addEventListener('change', function () {
                        handleImagePreview(this.files[0], [currentProfileImage, profileImagePreview]);
                    });
                }

                // Remove profile image
                const removeProfileImageBtn = document.getElementById('removeProfileImage');
                if (removeProfileImageBtn) {
                    removeProfileImageBtn.addEventListener('click', function () {
                        const defaultImage = `https://ui-avatars.com/api/?name=${encodeURIComponent('<%= user.username %>')}&background=2e7d32&color=fff&size=160`;
                        currentProfileImage.src = defaultImage;
                        profileImagePreview.src = defaultImage;
                        editProfileImagePreview.src = defaultImage;
                        newProfileImageInput.value = '';
                    });
                }

                // Profile form validation
                const editProfileForm = document.getElementById('editProfileForm');
                const saveProfileChangesBtn = document.getElementById('saveProfileChanges');
                const profileInputs = editProfileForm.querySelectorAll('input[pattern], textarea[maxlength]');
                profileInputs.forEach(input => {
                    input.addEventListener('input', () => validateField(input));
                    input.addEventListener('blur', () => validateField(input));
                });

                if (saveProfileChangesBtn) {
                    saveProfileChangesBtn.addEventListener('click', async function () {
                        if (!validateForm(editProfileForm)) {
                            const firstError = editProfileForm.querySelector('.is-invalid');
                            if (firstError) firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            return;
                        }
                        const formData = new FormData();
                        formData.append('username', document.getElementById('username').value.trim());
                        formData.append('phone', document.getElementById('phone').value.trim());
                        formData.append('bio', document.getElementById('bio').value.trim());
                        if (profilePhotoUpload.files[0]) formData.append('profileImage', profilePhotoUpload.files[0]);
                        // try {
                        //     alert('before fetch')
                        //     const response = await fetch('/editProfile', {
                        //         method: 'PATCH',
                        //         body: JSON.stringify({
                        //             formData
                        //         })
                        //     });
                        //     const result = await response.json();
                        //     if (response.ok) {
                        //         await Swal.fire({
                        //             icon: 'success',
                        //             title: 'Profile updated!',
                        //             text: result.message || 'Your profile has been updated successfully.',
                        //             timer: 1500,
                        //             showConfirmButton: false
                        //         });
                        //         bootstrap.Modal.getInstance(document.getElementById('editProfileModal')).hide();
                        //         window.location.reload();
                        //     } else {
                        //         await Swal.fire('Error!', result.message || 'Failed to update profile.', 'error');
                        //     }
                        // } catch (error) {
                        //     await Swal.fire('Error!', 'Something went wrong while updating the profile.', 'error');
                        //     console.error('Error:', error);
                        // }
                    });
                }

                // Add address form validation
                const addAddressForm = document.getElementById('addAddressForm');
                const saveAddressBtn = document.getElementById('saveAddress');
                const addAddressInputs = addAddressForm.querySelectorAll('input[pattern], input[required]');
                const addAddressSelects = addAddressForm.querySelectorAll('select[required]');
                addAddressInputs.forEach(input => {
                    input.addEventListener('input', () => validateField(input));
                    input.addEventListener('blur', () => validateField(input));
                });
                addAddressSelects.forEach(select => {
                    select.addEventListener('change', () => validateSelect(select));
                });

                if (saveAddressBtn) {
                    saveAddressBtn.addEventListener('click', async function () {
                        if (!validateForm(addAddressForm)) {
                            const firstError = addAddressForm.querySelector('.is-invalid');
                            if (firstError) firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            return;
                        }
                        const formData = {
                            name: document.getElementById('name').value.trim(),
                            phone: document.getElementById('phone').value.trim(),
                            altPhone: document.getElementById('altPhone').value.trim() || undefined,
                            addressType: document.getElementById('addressType').value,
                            country: document.getElementById('country').value,
                            state: document.getElementById('state').value.trim(),
                            city: document.getElementById('city').value.trim(),
                            street: document.getElementById('street').value.trim(),
                            pincode: document.getElementById('pincode').value.trim()
                        };
                        try {
                            const response = await fetch('/addAddress', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(formData)
                            });
                            const result = await response.json();
                            if (response.ok) {
                                await Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: 'Address added!',
                                    text: result.message || 'Your new address has been saved.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                                bootstrap.Modal.getInstance(document.getElementById('addAddressModal')).hide();
                                window.location.reload();
                            } else {
                                await Swal.fire('Error!', result.message || 'Failed to save address.', 'error');
                            }
                        } catch (error) {
                            await Swal.fire('Error!', 'Something went wrong while saving the address.', 'error');
                            console.error('Error:', error);
                        }
                    });
                }

                // Reset add address form
                document.getElementById('addAddressModal').addEventListener('hidden.bs.modal', function () {
                    addAddressForm.reset();
                    addAddressForm.querySelectorAll('.is-invalid, .is-valid').forEach(el => {
                        el.classList.remove('is-invalid', 'is-valid');
                        const errorElement = document.getElementById(`${el.id}Error`);
                        if (errorElement) errorElement.style.display = 'none';
                    });
                });

                // Edit address form handling
                window.loadAddressForEdit = function (addressData) {
                    const address = JSON.parse(decodeURIComponent(addressData));
                    document.getElementById('editAddressId').value = address._id;
                    document.getElementById('editAddressType').value = address.addressType;
                    document.getElementById('editName').value = address.name;
                    document.getElementById('editStreet').value = address.street;
                    document.getElementById('editCity').value = address.city;
                    document.getElementById('editState').value = address.state;
                    document.getElementById('editPincode').value = address.pincode;
                    document.getElementById('editCountry').value = address.country;
                    document.getElementById('editPhone').value = address.phone;
                    document.getElementById('editAltPhone').value = address.altPhone || '';
                    editAddressForm.querySelectorAll('input, select').forEach(el => validateField(el) || validateSelect(el));
                };

                // Edit address form validation
                const editAddressForm = document.getElementById('editAddressForm');
                const updateAddressBtn = document.getElementById('updateAddress');
                const editAddressInputs = editAddressForm.querySelectorAll('input[pattern], input[required]');
                const editAddressSelects = editAddressForm.querySelectorAll('select[required]');
                editAddressInputs.forEach(input => {
                    input.addEventListener('input', () => validateField(input));
                    input.addEventListener('blur', () => validateField(input));
                });
                editAddressSelects.forEach(select => {
                    select.addEventListener('change', () => validateSelect(select));
                });

                if (updateAddressBtn) {
                    updateAddressBtn.addEventListener('click', async function () {
                        if (!validateForm(editAddressForm)) {
                            const firstError = editAddressForm.querySelector('.is-invalid');
                            if (firstError) firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            return;
                        }
                        const formData = {
                            _id: document.getElementById('editAddressId').value,
                            addressType: document.getElementById('editAddressType').value,
                            name: document.getElementById('editName').value.trim(),
                            street: document.getElementById('editStreet').value.trim(),
                            city: document.getElementById('editCity').value.trim(),
                            state: document.getElementById('editState').value.trim(),
                            pincode: document.getElementById('editPincode').value.trim(),
                            country: document.getElementById('editCountry').value,
                            phone: document.getElementById('editPhone').value.trim(),
                            altPhone: document.getElementById('editAltPhone').value.trim() || undefined
                        };
                        try {
                            const response = await fetch(`/editAddress?addressId=${encodeURIComponent(formData._id)}`, {
                                method: 'PATCH',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(formData)
                            });
                            const result = await response.json();
                            if (response.ok) {
                                await Swal.fire({
                                    icon: 'success',
                                    title: 'Address updated!',
                                    text: result.message || 'Your address has been updated successfully.',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                                bootstrap.Modal.getInstance(document.getElementById('editAddressModal')).hide();
                                window.location.reload();
                            } else {
                                await Swal.fire('Error!', result.message || 'Failed to update address.', 'error');
                            }
                        } catch (error) {
                            await Swal.fire('Error!', 'Something went wrong while updating the address.', 'error');
                            console.error('Error:', error);
                        }
                    });
                }

                // Reset edit address form
                document.getElementById('editAddressModal').addEventListener('hidden.bs.modal', function () {
                    editAddressForm.reset();
                    editAddressForm.querySelectorAll('.is-invalid, .is-valid').forEach(el => {
                        el.classList.remove('is-invalid', 'is-valid');
                        const errorElement = document.getElementById(`${el.id}Error`);
                        if (errorElement) errorElement.style.display = 'none';
                    });
                });

                // Delete address
                window.confirmDeleteAddress = async function (addressId) {
                    const { isConfirmed } = await Swal.fire({
                        title: "Are you sure?",
                        text: "This address will be permanently deleted!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#d33",
                        cancelButtonColor: "#3085d6",
                        confirmButtonText: "Yes, delete it!",
                        cancelButtonText: "No, keep it"
                    });
                    if (!isConfirmed) return;
                    try {
                        const response = await fetch(`/deleteAddress?addressId=${encodeURIComponent(addressId)}`, {
                            method: 'DELETE'
                        });
                        const result = await response.json();
                        if (response.ok && result.success) {
                            await Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: result.message || 'Address deleted successfully!',
                                timer: 1500,
                                showConfirmButton: false
                            });
                            window.location.reload();
                        } else {
                            await Swal.fire('Error!', result.message || 'Failed to delete address.', 'error');
                        }
                    } catch (error) {
                        await Swal.fire('Error!', 'Something went wrong while deleting the address.', 'error');
                        console.error('Error:', error);
                    }
                };

                // Order details
                window.loadOrderDetails = function (orderId) {
                    document.getElementById('orderDetailsContent').innerHTML = `
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                `;
                    fetch(`/api/orders/${orderId}`)
                        .then(response => response.json())
                        .then(order => {
                            document.getElementById('orderDetailsContent').innerHTML = `
                            <div class="row">
                                <div class="col-md-6">
                                    <h5>Order #${order.orderNumber}</h5>
                                    <p class="text-muted">Placed on ${new Date(order.orderDate).toLocaleDateString()}</p>
                                    <div class="mb-4">
                                        <h6>Shipping Address</h6>
                                        <p>
                                            ${order.shippingAddress?.name || 'N/A'}<br>
                                            ${order.shippingAddress?.street || ''}<br>
                                            ${order.shippingAddress?.city || ''}, ${order.shippingAddress?.state || ''} ${order.shippingAddress?.pincode || ''}<br>
                                            ${order.shippingAddress?.country || ''}
                                        </p>
                                    </div>
                                    <div>
                                        <h6>Payment Method</h6>
                                        <p><i class="fab fa-cc-visa me-2"></i>${order.paymentMethod || 'N/A'}<br>Billing address same as shipping</p>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <h6>Order Summary</h6>
                                    <div class="table-responsive">
                                        <table class="table">
                                            <thead>
                                                <tr><th>Product</th><th>Price</th><th>Qty</th><th>Total</th></tr>
                                            </thead>
                                            <tbody>
                                                ${order.items.map(item => `
                                                    <tr>
                                                        <td>${item.name || 'N/A'}</td>
                                                        <td>$${item.price?.toFixed(2) || '0.00'}</td>
                                                        <td>${item.quantity || 0}</td>
                                                        <td>$${(item.price * item.quantity)?.toFixed(2) || '0.00'}</td>
                                                    </tr>
                                                `).join('')}
                                                <tr><td colspan="3" class="text-end">Subtotal:</td><td>$${order.subtotal?.toFixed(2) || '0.00'}</td></tr>
                                                <tr><td colspan="3" class="text-end">Shipping:</td><td>$${order.shippingCost?.toFixed(2) || '0.00'}</td></tr>
                                                <tr><td colspan="3" class="text-end fw-bold">Total:</td><td class="fw-bold">$${order.totalAmount?.toFixed(2) || '0.00'}</td></tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="alert alert-info"><i class="fas fa-info-circle me-2"></i><strong>Status:</strong> ${order.status || 'N/A'}</div>
                                </div>
                            </div>
                        `;
                        })
                        .catch(error => {
                            Swal.fire('Error!', 'Failed to load order details. Please try again.', 'error');
                            console.error('Error:', error);
                        });
                };

                // Cancel order
                window.confirmCancelOrder = async function (orderId) {


                    const { isConfirmed } = await Swal.fire({
                        title: 'Cancel Order?',
                        text: "Are you sure you want to cancel this order?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, cancel it!',
                        cancelButtonText: 'Keep order'
                    })

                    if (isConfirmed) {
                        const response = await fetch('/cancellOrder', {
                            method: 'post',
                            headers: {
                                'Content-type': 'application/json'
                            },
                            body: JSON.stringify({
                                orderId
                            })
                        })

                        const result = await response.json()


                        if (response.ok) {
                            await Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'success',
                                title: result.message || 'Order cancelled',
                                showConfirmButton: false,
                                timer: 2000
                            })

                            window.location.reload()
                        } else {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: result.message || 'Order cancell Failed',
                                showConfirmButton: false,
                                timer: 2000
                            })
                        }


                    }



                    // document.getElementById('orderToCancelId').value = orderId;
                    // const modal = new bootstrap.Modal(document.getElementById('confirmCancelOrderModal'));
                    // modal.show();
                };

                const confirmCancelOrderBtn = document.getElementById('confirmCancelOrderBtn');
                if (confirmCancelOrderBtn) {
                    confirmCancelOrderBtn.addEventListener('click', async function () {
                        const orderId = document.getElementById('orderToCancelId').value;
                        const reason = document.getElementById('cancelReason').value;
                        try {
                            const response = await fetch(`/api/orders/${orderId}/cancel`, {
                                method: 'PUT',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ reason })
                            });
                            const result = await response.json();
                            if (response.ok) {
                                await Swal.fire({
                                    icon: 'success',
                                    title: 'Order cancelled!',
                                    text: result.message || 'Your order has been cancelled successfully.',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                                bootstrap.Modal.getInstance(document.getElementById('confirmCancelOrderModal')).hide();
                                window.location.reload();
                            } else {
                                await Swal.fire('Error!', result.message || 'Failed to cancel order.', 'error');
                            }
                        } catch (error) {
                            await Swal.fire('Error!', 'Something went wrong while cancelling the order.', 'error');
                            console.error('Error:', error);
                        }
                    });
                }

                // Print order
                const printOrderBtn = document.getElementById('printOrderBtn');
                if (printOrderBtn) {
                    printOrderBtn.addEventListener('click', function () {
                        window.print();
                    });
                }
            });

            async function editProfile(userId) {
                try {
                    const username = document.getElementById('editUsername').value
                    const email = document.getElementById('editEmail').value
                    const phone = document.getElementById('editPhone').value
                    const response = await fetch(`/editProfile?userId=${encodeURIComponent(userId)}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            username: username,
                            email: email,
                            phone: phone
                        })
                    });
                    const result = await response.json();
                    if (response.ok) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Profile updated!',
                            text: result.message || 'Your profile has been updated successfully.',
                            timer: 1500,
                            showConfirmButton: false
                        });
                        bootstrap.Modal.getInstance(document.getElementById('editProfileModal')).hide();
                        window.location.reload();
                    } else {
                        await Swal.fire('Error!', result.message || 'Failed to update profile.', 'error');
                    }
                } catch (error) {
                    await Swal.fire('Error!', 'Something went wrong while updating the profile.', 'error');
                    console.error('Error:', error);
                }
            }


            async function returnOrder(orderId) {
                try {
                    const { value: reason } = await Swal.fire({
                        title: 'Return Reason',
                        input: 'text',
                        inputLabel: 'Please provide a reason for returning the order:',
                        inputPlaceholder: 'e.g., Wrong item received',
                        showCancelButton: true,
                        confirmButtonText: 'Submit',
                        cancelButtonText: 'Cancel',
                    });

                    if (!reason) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'warning',
                            title: 'You must enter a reason!',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                        return;
                    }



                    const response = await fetch('/returnReq', {
                        method: 'post',
                        headers: {
                            'Content-type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId,
                            reason
                        })
                    })

                    const data = await response.json()

                    if (response.ok) {
                        await Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: data.message || 'Return request submitted!',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });

                        window.location.reload()

                    } else {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: data.message || 'Return request failed!',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });

                    }
                } catch (error) {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: data.message || 'Return request failed!',
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });

                }
            }


        </script>
</body>

</html>
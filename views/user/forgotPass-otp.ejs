<style>
    /* Base Styles */
    body {
        background-color: #f8f9fa;
        font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    }

    .login_wrap {
        transition: all 0.3s ease;
    }

    .login_wrap:hover {
        transform: translateY(-3px);
    }

    /* Container Styles */
    .otp-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 2.5rem;
        border: 1px solid rgba(0, 0, 0, 0.08);
        border-radius: 12px;
        background-color: #ffffff;
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.05);
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    /* Header Styles */
    .heading_s1 h3 {
        color: #2c3e50;
        font-weight: 700;
        font-size: 1.75rem;
        margin-bottom: 1.75rem;
        letter-spacing: -0.5px;
    }

    /* Form Styles */
    .form-group {
        width: 100%;
        margin-bottom: 1.75rem;
    }

    .form-control {
        height: 50px;
        padding: 0.75rem 1rem;
        border: 1px solid #e0e6ed;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-shadow: none;
        text-align: center;
        letter-spacing: 5px;
        font-weight: 600;
        color: #2c3e50;
    }

    .form-control:focus {
        border-color: #4e73df;
        box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.15);
    }

    /* Button Styles */
    .btn-primary {
        background-color: #4e73df;
        border-color: #4e73df;
        padding: 0.75rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .btn-primary:hover {
        background-color: #3a5bc7;
        border-color: #3a5bc7;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(58, 91, 199, 0.2);
    }

    /* Timer Styles */
    .otp-timer-wrapper {
        margin: 1.5rem 0;
    }

    .otp-timer {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 70px;
        height: 70px;
        border-radius: 50%;
        background-color: #f8f9fa;
        font-size: 1.25rem;
        font-weight: 700;
        color: #4e73df;
        border: 3px solid #e0e6ed;
        transition: all 0.3s ease;
        position: relative;
    }

    .otp-timer:after {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 3px solid rgba(78, 115, 223, 0.1);
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.05);
            opacity: 0.7;
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }
    }

    /* Resend Button Styles */
    .resend-button {
        color: #4e73df;
        font-weight: 600;
        background: none;
        border: none;
        padding: 0;
        font-size: 0.95rem;
        transition: all 0.3s ease;
    }

    .resend-button:hover {
        color: #3a5bc7;
        text-decoration: none;
        transform: translateY(-1px);
    }

    .resend-button:disabled {
        color: #95a5a6;
        cursor: not-allowed;
        opacity: 0.7;
    }

    /* Alert Styles */
    .alert {
        border-radius: 8px;
        padding: 0.75rem 1.25rem;
        font-size: 0.9rem;
    }

    .alert-danger {
        background-color: rgba(231, 74, 59, 0.1);
        border-color: rgba(231, 74, 59, 0.2);
        color: #e74a3b;
    }

    /* Footer Link Styles */
    .text-muted {
        color: #7f8c8d !important;
        font-size: 0.9rem;
    }

    .text-muted a {
        color: #4e73df;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .text-muted a:hover {
        color: #3a5bc7;
        text-decoration: none;
    }

    /* Responsive Adjustments */
    @media (max-width: 576px) {
        .otp-container {
            padding: 2rem 1.5rem;
        }

        .heading_s1 h3 {
            font-size: 1.5rem;
        }

        .form-control {
            height: 45px;
            font-size: 0.9rem;
        }
    }
</style>

<div class="container col-4 login_wrap widget-taber-content p-30 background-white border-radius-5 mt-30">
    <div class="padding_eight_all bg-white">
        <div class="heading_s1">
            <h3 class="mb-30 text-center">Email Verification</h3>
        </div>
        <div class="otp-container">
            <form onsubmit="return validateForm(event)">
                <div class="form-group">
                    <label for="otp">Enter OTP:</label>
                    <input type="text" id="otp" name="otp" class="form-control">
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Verify OTP</button>
                </div>
            </form>
            <div class="form-group otp-timer-wrapper">
                <div class="otp-timer" id="otpTimer">1:00</div>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-link resend-button" onclick="reSendOtp()">Resend OTP</button>
            </div>

            <% if(locals.message && message.length>0){ %>
                <div class="alert alert-danger mt-3">
                    <%= message %>
                </div>
                <% } %>
        </div>
        <div class="text-muted text-center pt-25">
            Already verified? <a href="/login">Login now</a>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let otpTimerInterval
    let timer = 60


    function startOtpTimer() {
        const timerElement = document.getElementById('otpTimer')
        otpTimerInterval = setInterval(function () {

            const minutes = Math.floor(timer / 60)
            const seconds = timer % 60
            timerElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`


            if (timer < 0) {
                clearInterval(otpTimerInterval)
                timerElement.textContent = 'Expired'
                timerElement.style.color = 'red'
            }
            timer--
        }, 1000)
    }

    InitializeOtpTimer()



    function InitializeOtpTimer() {
        clearInterval(otpTimerInterval)
        timer = 60
        startOtpTimer()
    }


    async function validateForm() {
        event.preventDefault()
        alert('start validateForm')
        try {
            const otpInput = document.getElementById('otp').value
            const response = await fetch('/varify-passForgot-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    otp: otpInput
                }),
            })
            alert('after fetch req')
            const result = await response.json()
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'OTP Verified Successfully',
                    showConfirmButton: false,
                    timer: 1500
                })
                setTimeout(() => {
                    window.location.href = result.redirect || '/reset-password';

                }, 1500); // Delay reload so user sees success

            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid OTP',
                    text: result.message
                })
            }
            return false
        } catch (error) {
            console.error('Error during OTP validation:', error);
            Swal.fire({
                icon: 'error',
                title: 'Something went wrong!',
                text: 'Please check your connection or try again later.'
            });

        }
    }

    async function reSendOtp() {
        try {
            clearInterval(otpTimerInterval)
            timer = 60
            const response = await fetch('/reSentOtp', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json'
                }
            })

            const result = await response.json()

            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'OTP Resent',
                    text: result.message || 'Check your email again!',
                    timer: 1500,
                    showConfirmButton: false
                });

                InitializeOtpTimer()


            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to resend OTP',
                    text: result.message || 'Try again later!'
                });
            }
        } catch (error) {
            Swal.fire({
            icon: 'error',
            title: 'Something went wrong!',
            
        });
        }
    }

</script>